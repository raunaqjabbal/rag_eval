question,contexts,ground_truth,evolution_type,metadata,episode_done
What is the function decorator used to cache functions that return data in Streamlit?,"['Caching and state - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateremovest.cache_datast.cache_resourcest.cachedeletest.session_statest.query_paramsst.experimental_get_query_paramsdeletest.experimental_set_query_paramsdeleteConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Caching and stateCaching and state\nOptimize performance and add statefulness to your app!\nCaching\nStreamlit provides powerful cache primitives for data and global resources. They allow your app to stay performant even when loading data from the web, manipulating large datasets, or performing expensive computations.\nCache dataFunction decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).@st.cache_data\ndef long_function(param1, param2):\n  # Perform expensive computation here or\n  # fetch data from the web here\n  return data\nCache resourceFunction decorator to cache functions that return global resources (e.g. database connections, ML models).@st.cache_resource\ndef init_model():\n  # Return a global resource here\n  return pipeline(\n    ""sentiment-analysis"",\n    model=""distilbert-base-uncased-finetuned-sst-2-english""\n  )\n\nManage state\nStreamlit re-executes your script with each user interaction. Widgets have built-in statefulness between reruns, but Session State lets you do more!\nSession StateSave data between reruns and across pages.st.session_state[""foo""] = ""bar""\nQuery parametersGet, set, or clear the query parameters that are shown in the browser\'s URL bar.st.query_params[key] = value\nst.query_params.clear()\n\nDeprecated commands\ndelete\nThis command was deprecated in version 1.18.0. Use st.cache_data or st.cache_resource instead.\nCachingFunction decorator to memoize function executions.@st.cache(ttl=3600)\ndef run_long_computation(arg1, arg2):\n  # Do stuff here\n  return computation_output\ndelete\nThis command was deprecated in version 1.18.0. Use st.cache_data instead.\nMemoExperimental function decorator to memoize function executions.@st.experimental_memo\ndef fetch_and_clean_data(url):\n  # Fetch data from URL here, and then clean it up.\n  return data\ndelete\nThis command was deprecated in version 1.18.0. Use st.cache_resource instead.\nSingletonExperimental function decorator to store singleton objects.@st.experimental_singleton\ndef get_database_session(url):\n  # Create a database session object that points to the URL.\n  return session\ndeleteGet query parametersGet query parameters that are shown in the browser\'s URL bar.param_dict = st.experimental_get_query_params()\ndeleteSet query parametersSet query parameters that are shown in the browser\'s URL bar.st.experimental_set_query_params(\n  {""show_all""=True, ""selected""=[""asia"", ""america""]}\n)\nPrevious: Execution flowNext: st.cache_dataforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']",@st.cache_data,simple,"[{'source': 'https://docs.streamlit.io/develop/api-reference/caching-and-state', 'title': 'Caching and state - Streamlit Docs'}]",True
Which Streamlit component enables users to add tags and offers tag value suggestions?,"['message(""My message"")\nmessage(""Hello bot!"", is_user=True)  # align\'s the message to the right\nStreamlit Option MenuSelect a single item from a list of options in a menu. Created by @victoryhb.from streamlit_option_menu import option_menu\n\noption_menu(""Main Menu"", [""Home"", \'Settings\'],\n  icons=[\'house\', \'gear\'], menu_icon=""cast"", default_index=1)\nStreamlit ExtrasA library with useful Streamlit extras. Created by @arnaudmiribel.from streamlit_extras.stoggle import stoggle\n\nstoggle(\n    ""Click me!"", """"""🥷 Surprise! Here\'s some additional content"""""",)\nStreamlit ElementsCreate a draggable and resizable dashboard in Streamlit. Created by @okls.from streamlit_elements import elements, mui, html\n\nwith elements(""new_element""):\n  mui.Typography(""Hello world"")\nTagsAdd tags to your Streamlit apps. Created by @gagan3012.from streamlit_tags import st_tags\n\nst_tags(label=\'# Enter Keywords:\', text=\'Press enter to add more\', value=[\'Zero\', \'One\', \'Two\'],\nsuggestions=[\'five\', \'six\', \'seven\', \'eight\', \'nine\', \'three\', \'eleven\', \'ten\', \'four\'], maxtags = 4, key=\'1\')\nStqdmThe simplest way to handle a progress bar in streamlit app. Created by @Wirg.from stqdm import stqdm\n\nfor _ in stqdm(range(50)):\n    sleep(0.5)\nTimelineDisplay a Timeline in Streamlit apps using TimelineJS. Created by @innerdoc.from streamlit_timeline import timeline\n\nwith open(\'example.json\', ""r"") as f:\n  timeline(f.read(), height=800)\nCamera input liveAlternative for st.camera_input which returns the webcam images live. Created by @blackary.from camera_input_live import camera_input_live\n\nimage = camera_input_live()\nst.image(value)\nStreamlit AceAce editor component for Streamlit. Created by @okld.from streamlit_ace import st_ace\n\ncontent = st_ace()\ncontent\nStreamlit ChatStreamlit Component for a Chatbot UI. Created by @AI-Yash.from streamlit_chat import message\n\nmessage(""My message"")\nmessage(""Hello bot!"", is_user=True)  # align\'s the message to the right\nStreamlit Option MenuSelect a single item from a list of options in a menu. Created by @victoryhb.from streamlit_option_menu import option_menu\n\noption_menu(""Main Menu"", [""Home"", \'Settings\'],\n  icons=[\'house\', \'gear\'], menu_icon=""cast"", default_index=1)\nStreamlit ExtrasA library with useful Streamlit extras. Created by @arnaudmiribel.from streamlit_extras.stoggle import stoggle\n\nstoggle(\n    ""Click me!"", """"""🥷 Surprise! Here\'s some additional content"""""",)\nStreamlit ElementsCreate a draggable and resizable dashboard in Streamlit. Created by @okls.from streamlit_elements import elements, mui, html\n\nwith elements(""new_element""):\n  mui.Typography(""Hello world"")\nTagsAdd tags to your Streamlit apps. Created by @gagan3012.from streamlit_tags import st_tags\n\nst_tags(label=\'# Enter Keywords:\', text=\'Press enter to add more\', value=[\'Zero\', \'One\', \'Two\'],\nsuggestions=[\'five\', \'six\', \'seven\', \'eight\', \'nine\', \'three\', \'eleven\', \'ten\', \'four\'], maxtags = 4, key=\'1\')\nStqdmThe simplest way to handle a progress bar in streamlit app. Created by @Wirg.from stqdm import stqdm\n\nfor _ in stqdm(range(50)):\n    sleep(0.5)\nTimelineDisplay a Timeline in Streamlit apps using TimelineJS. Created by @innerdoc.from streamlit_timeline import timeline\n\nwith open(\'example.json\', ""r"") as f:\n  timeline(f.read(), height=800)\nCamera input liveAlternative for st.camera_input which returns the webcam images live. Created by @blackary.from camera_input_live import camera_input_live\n\n']",TagsAdd tags to your Streamlit apps. Created by @gagan3012.from streamlit_tags import st_tags,reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/widgets', 'title': 'Input widgets - Streamlit Docs'}]",True
Which Streamlit component integrates Lottie animations in apps?,"['data = [{\'dropout\':0.1, \'lr\': 0.001, \'loss\': 10.0, \'optimizer\': \'SGD\'}, {\'dropout\':0.15, \'lr\': 0.01, \'loss\': 3.5, \'optimizer\': \'Adam\'}, {\'dropout\':0.3, \'lr\': 0.1, \'loss\': 4.5, \'optimizer\': \'Adam\'}]\nhip.Experiment.from_iterable(data).display()\nEChartsHigh dimensional Interactive Plotting. Created by @andfanilo.from streamlit_echarts import st_echarts\nst_echarts(options=options)\nStreamlit FoliumStreamlit Component for rendering Folium maps. Created by @randyzwitch.m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nst_data = st_folium(m, width=725)\nSpacy-StreamlitspaCy building blocks and visualizers for Streamlit apps. Created by @explosion.models = [""en_core_web_sm"", ""en_core_web_md""]\nspacy_streamlit.visualize(models, ""Sundar Pichai is the CEO of Google."")\nStreamlit AgraphA Streamlit Graph Vis, based on react-grah-vis. Created by @ChrisDelClea.from streamlit_agraph import agraph, Node, Edge, Config\nagraph(nodes=nodes, edges=edges, config=config)\nStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.lottie_hello = load_lottieurl(""https://assets5.lottiefiles.com/packages/lf20_V9t630.json"")\nst_lottie(lottie_hello, key=""hello"")\nPlotly EventsMake Plotly charts interactive!. Created by @null-jones.fig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\nStreamlit ExtrasA library with useful Streamlit extras. Created by @arnaudmiribel.chart += get_annotations_chart(annotations=[(""Mar 01, 2008"", ""Pretty good day for GOOG""), (""Dec 01, 2007"", ""Something\'s going wrong for GOOG & AAPL""), (""Nov 01, 2008"", ""Market starts again thanks to...""), (""Dec 01, 2009"", ""Small crash for GOOG after...""),],)\nst.altair_chart(chart, use_container_width=True)\nPlostA deceptively simple plotting library for Streamlit. Created by @tvst.import plost\nplost.line_chart(my_dataframe, x=\'time\', y=\'stock_value\', color=\'stock_name\',)\nHiPlotHigh dimensional Interactive Plotting. Created by @facebookresearch.data = [{\'dropout\':0.1, \'lr\': 0.001, \'loss\': 10.0, \'optimizer\': \'SGD\'}, {\'dropout\':0.15, \'lr\': 0.01, \'loss\': 3.5, \'optimizer\': \'Adam\'}, {\'dropout\':0.3, \'lr\': 0.1, \'loss\': 4.5, \'optimizer\': \'Adam\'}]\nhip.Experiment.from_iterable(data).display()\nEChartsHigh dimensional Interactive Plotting. Created by @andfanilo.from streamlit_echarts import st_echarts\nst_echarts(options=options)\nStreamlit FoliumStreamlit Component for rendering Folium maps. Created by @randyzwitch.m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nst_data = st_folium(m, width=725)\nSpacy-StreamlitspaCy building blocks and visualizers for Streamlit apps. Created by @explosion.models = [""en_core_web_sm"", ""en_core_web_md""]\nspacy_streamlit.visualize(models, ""Sundar Pichai is the CEO of Google."")\nStreamlit AgraphA Streamlit Graph Vis, based on react-grah-vis. Created by @ChrisDelClea.from streamlit_agraph import agraph, Node, Edge, Config\nagraph(nodes=nodes, edges=edges, config=config)\nStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.l']",Streamlit Lottie,reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts', 'title': 'Chart elements - Streamlit Docs'}]",True
"How can the Column configuration API optimize display and editing in Streamlit for dataframes and data editors, with the ability to select multiple columns and ranges?","['. To select multiple columns, hold Ctrl while\nselecting columns. Hold Shift to select a range of columns.\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\nif ""df"" not in st.session_state:\n    st.session_state.df = pd.DataFrame(\n        np.random.randn(12, 5), columns=[""a"", ""b"", ""c"", ""d"", ""e""]\n    )\n\nevent = st.dataframe(\n    st.session_state.df,\n    key=""data"",\n    on_select=""rerun"",\n    selection_mode=[""multi-row"", ""multi-column""],\n)\n\nevent.selection\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\nelement.add_rowsStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeConcatenate a dataframe to the bottom of the current one.\nFunction signature[source] element.add_rows(data=None, **kwargs) Parameters\n\ndata\n(pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, Iterable, dict, or None)\n\n \nTable to concat. Optional.\n\n\n**kwargs\n(pandas.DataFrame, numpy.ndarray, Iterable, dict, or None)\n\n \nThe named dataset to concat. Optional. You can only pass in 1\ndataset (including the one in the data parameter).\nExample\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table = st.table(df1)\n\ndf2 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table.add_rows(df2)\n# Now the table shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nYou can do the same thing with plots. For example, if you want to add\nmore data to a line chart:\n\n# Assuming df1 and df2 from the example above still exist...\nmy_chart = st.line_chart(df1)\nmy_chart.add_rows(df2)\n# Now the chart shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nAnd for plots whose datasets are named, you can pass the data with a\nkeyword argument where the key is the name:\n\nmy_chart = st.vega_lite_chart({\n    \'mark\': \'line\',\n    \'encoding\': {\'x\': \'a\', \'y\': \'b\'},\n    \'datasets\': {\n      \'some_fancy_name\': df1,  # <-- named dataset\n     },\n    \'data\': {\'name\': \'some_fancy_name\'},\n}),\nmy_chart.add_rows(some_fancy_name=df2)  # <-- name used as keyword\n\n\n\nInteractivity\nDataframes displayed with st.dataframe are interactive. End users can sort, resize, search, and copy data to their clipboard. For on overview of features, read our Dataframes guide.\nConfiguring columns\nYou can configure the display and editing behavior of columns in st.dataframe and st.data_editor via the Column configuration API. We have developed the API to let you add images, charts, and clickable URLs in dataframe and data editor']","The Column configuration API can optimize display and editing in Streamlit for dataframes and data editors by allowing users to add images, charts, and clickable URLs. This API also enables the selection of multiple columns and ranges, enhancing the interactive capabilities of the data visualization.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/data/st.dataframe', 'title': 'st.dataframe - Streamlit Docs'}]",True
How can you display data as a table and graph interactively?,"['st.dataframe - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsremovest.dataframest.data_editorst.column_configaddst.tablest.metricst.jsonChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Data elements/st.dataframestarTipThis page only contains information on the st.dataframe API. For an overview of working with dataframes read Dataframes. If you want to let users interactively edit dataframes, check out st.data_editor.\nst.dataframeStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay a dataframe as an interactive table.\nThis command works with dataframes from Pandas, PyArrow, Snowpark, and PySpark.\nIt can also display several other types that can be converted to dataframes,\ne.g. numpy arrays, lists, sets and dictionaries.\nFunction signature[source] st.dataframe(data=None, width=None, height=None, *, use_container_width=False, hide_index=None, column_order=None, column_config=None, key=None, on_select=""ignore"", selection_mode=""multi-row"") Parameters\n\ndata\n(pandas.DataFrame, pandas.Series, pandas.Styler, pandas.Index,             pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame,             snowflake.snowpark.table.Table, Iterable, dict, or None)\n\n \nThe data to display.\nIf data is a pandas.Styler, it will be used to style its\nunderlying pandas.DataFrame. Streamlit supports custom cell\nvalues and colors. It does not support some of the more exotic\npandas styling features, like bar charts, hovering, and captions.\n\n\nwidth\n(int or None)\n\n \nDesired width of the dataframe expressed in pixels. If width is\nNone (default), Streamlit sets the dataframe width to fit its\ncontents up to the width of the parent container. If width is\ngreater than the width of the parent container, Streamlit sets the\ndataframe width to match the width of the parent container.\n\n\nheight\n(int or None)\n\n \nDesired height of the dataframe expressed in pixels. If height\nis None (default), Streamlit sets the height to show at most\nten rows. Vertical scrolling within the dataframe element is\nenabled when the height does not accomodate all rows.\n\n\nuse_container_width\n(bool)\n\n \nWhether to override width with the width of the parent\ncontainer. If use_container_width is False (default),\nStreamlit sets the dataframe\'s width according to width. If\nuse_container_width is True, Streamlit sets the width of\nthe dataframe to match the width of the parent container.\n\n\nhide_index\n(bool or None)\n\n \nWhether to hide the index column(s). If hide_index is None\n(default), the visibility of index columns is automatically\ndetermined based on the data.\n\n\ncolumn_order\n(Iterable of str or None)\n\n \nThe ordered list of columns to display. If column_order is\nNone (', ""st.graphviz_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.graphviz_chartst.graphviz_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay a graph using the dagre-d3 library.\nFunction signature[source] st.graphviz_chart(figure_or_dot, use_container_width=False) Parameters\n\nfigure_or_dot\n(graphviz.dot.Graph, graphviz.dot.Digraph, str)\n\n \nThe Graphlib graph object or dot string to display\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure's native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\nExample\n\nimport streamlit as st\nimport graphviz\n\n# Create a graphlib graph object\ngraph = graphviz.Digraph()\ngraph.edge('run', 'intr')\ngraph.edge('intr', 'runbl')\ngraph.edge('runbl', 'run')\ngraph.edge('run', 'kernel')\ngraph.edge('kernel', 'zombie')\ngraph.edge('kernel', 'sleep')\ngraph.edge('kernel', 'runmem')\ngraph.edge('sleep', 'swap')\ngraph.edge('swap', 'runswap')\ngraph.edge('runswap', 'new')\ngraph.edge('runswap', 'runmem')\ngraph.edge('new', 'runmem')\ngraph.edge('sleep', 'runmem')\n\nst.graphviz_chart(graph)\n\nOr you can render the chart from the graph using GraphViz's Dot\nlanguage:\n\nst.graphviz_chart('''\n    digraph {\n        run -> intr\n        intr -> runbl\n        runbl -> run\n        run -> kernel\n        kernel -> zombie\n        kernel -> sleep\n        kernel -> runmem\n        sleep -> swap\n        swap -> runswap\n        runswap -> new\n        runswap -> runmem\n        new -> runmem\n        sleep -> runmem\n    }\n''')\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\nPrevious: st.bokeh_chartNext: st.plotly_chartforumStill have""]","To display data as a table interactively, you can use the st.dataframe function in Streamlit. This function allows you to show dataframes from various sources like Pandas, PyArrow, Snowpark, and PySpark. It can also display other types that can be converted to dataframes, such as numpy arrays, lists, sets, and dictionaries. Additionally, to display a graph interactively, you can use the st.graphviz_chart function in Streamlit. This function allows you to create and display graphs using the dagre-d3 library.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/data/st.dataframe', 'title': 'st.dataframe - Streamlit Docs'}, {'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.graphviz_chart', 'title': 'st.graphviz_chart - Streamlit Docs'}]",True
"Which charting library does Streamlit support for figures, and which library enables graph display with dagre-d3?","['Chart elements - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elementsChart elements\nStreamlit supports several different charting libraries, and our goal is to\ncontinually add support for more. Right now, the most basic library in our\narsenal is Matplotlib. Then there are also\ninteractive charting libraries like Vega\nLite (2D charts) and\ndeck.gl (maps and 3D charts). And\nfinally we also provide a few chart types that are ""native"" to Streamlit,\nlike st.line_chart and st.area_chart.\nSimple chart elements\nSimple area chartsDisplay an area chart.st.area_chart(my_data_frame)\nSimple bar chartsDisplay a bar chart.st.bar_chart(my_data_frame)\nSimple line chartsDisplay a line chart.st.line_chart(my_data_frame)\nSimple scatter chartsDisplay a line chart.st.scatter_chart(my_data_frame)\nScatterplots on mapsDisplay a map with points on it.st.map(my_data_frame)\n\nAdvanced chart elements\nMatplotlibDisplay a matplotlib.pyplot figure.st.pyplot(my_mpl_figure)\nAltairDisplay a chart using the Altair library.st.altair_chart(my_altair_chart)\nVega-LiteDisplay a chart using the Vega-Lite library.st.vega_lite_chart(my_vega_lite_chart)\nPlotlyDisplay an interactive Plotly chart.st.plotly_chart(my_plotly_chart)\nBokehDisplay an interactive Bokeh chart.st.bokeh_chart(my_bokeh_chart)\nPyDeckDisplay a chart using the PyDeck library.st.pydeck_chart(my_pydeck_chart)\nGraphVizDisplay a graph using the dagre-d3 library.st.graphviz_chart(my_graphviz_spec)\n\nThird-party componentsThese are featured components created by our lovely community. If you don\'t see what you\'re looking for, check out our Components Hub app and Streamlit Extras for more examples and inspiration! PreviousStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.lottie_hello = load_lottieurl(""https://assets5.lottiefiles.com/packages/lf20_V9t630.json"")\nst_lottie(lottie_hello, key=""hello"")\nPlotly EventsMake Plotly charts interactive!. Created by @null-jones.fig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\nStreamlit ExtrasA library with useful Streamlit extras. Created by @arnaudmiribel.chart += get_annotations_chart(annotations=[(""Mar 01, 2008"", ""Pretty good day for GOOG""), (""Dec 01, 2007"", ""Something\'s going wrong for GOOG & AAPL""), (""Nov 01, 2008"", ""Market starts again thanks to...""), (""Dec 01, 2009"", ""Small crash for GOOG after...""),],)\nst.altair_chart(chart, use_container_width=True)\nPlostA deceptively simple plotting library for Streamlit. Created by @tvst.import plost\nplost.line_chart(my_dataframe, x=\'time\', y=\'stock_value\', color=\'stock_name\',)\nHiPlotHigh dimensional Interactive Plotting. Created by @facebookresearch.', ""st.graphviz_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.graphviz_chartst.graphviz_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay a graph using the dagre-d3 library.\nFunction signature[source] st.graphviz_chart(figure_or_dot, use_container_width=False) Parameters\n\nfigure_or_dot\n(graphviz.dot.Graph, graphviz.dot.Digraph, str)\n\n \nThe Graphlib graph object or dot string to display\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure's native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\nExample\n\nimport streamlit as st\nimport graphviz\n\n# Create a graphlib graph object\ngraph = graphviz.Digraph()\ngraph.edge('run', 'intr')\ngraph.edge('intr', 'runbl')\ngraph.edge('runbl', 'run')\ngraph.edge('run', 'kernel')\ngraph.edge('kernel', 'zombie')\ngraph.edge('kernel', 'sleep')\ngraph.edge('kernel', 'runmem')\ngraph.edge('sleep', 'swap')\ngraph.edge('swap', 'runswap')\ngraph.edge('runswap', 'new')\ngraph.edge('runswap', 'runmem')\ngraph.edge('new', 'runmem')\ngraph.edge('sleep', 'runmem')\n\nst.graphviz_chart(graph)\n\nOr you can render the chart from the graph using GraphViz's Dot\nlanguage:\n\nst.graphviz_chart('''\n    digraph {\n        run -> intr\n        intr -> runbl\n        runbl -> run\n        run -> kernel\n        kernel -> zombie\n        kernel -> sleep\n        kernel -> runmem\n        sleep -> swap\n        swap -> runswap\n        runswap -> new\n        runswap -> runmem\n        new -> runmem\n        sleep -> runmem\n    }\n''')\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\nPrevious: st.bokeh_chartNext: st.plotly_chartforumStill have""]","Streamlit supports several different charting libraries, with the most basic being Matplotlib. Additionally, Streamlit enables graph display with dagre-d3 library.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts', 'title': 'Chart elements - Streamlit Docs'}, {'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.graphviz_chart', 'title': 'st.graphviz_chart - Streamlit Docs'}]",True
How can you add rows to a table or more data to a plot in a Streamlit app?,"[', **kwargs) Parameters\n\ndata\n(pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, Iterable, dict, or None)\n\n \nTable to concat. Optional.\n\n\n**kwargs\n(pandas.DataFrame, numpy.ndarray, Iterable, dict, or None)\n\n \nThe named dataset to concat. Optional. You can only pass in 1\ndataset (including the one in the data parameter).\nExample\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table = st.table(df1)\n\ndf2 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table.add_rows(df2)\n# Now the table shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nYou can do the same thing with plots. For example, if you want to add\nmore data to a line chart:\n\n# Assuming df1 and df2 from the example above still exist...\nmy_chart = st.line_chart(df1)\nmy_chart.add_rows(df2)\n# Now the chart shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nAnd for plots whose datasets are named, you can pass the data with a\nkeyword argument where the key is the name:\n\nmy_chart = st.vega_lite_chart({\n    \'mark\': \'line\',\n    \'encoding\': {\'x\': \'a\', \'y\': \'b\'},\n    \'datasets\': {\n      \'some_fancy_name\': df1,  # <-- named dataset\n     },\n    \'data\': {\'name\': \'some_fancy_name\'},\n}),\nmy_chart.add_rows(some_fancy_name=df2)  # <-- name used as keyword\n\n\nPrevious: st.area_chartNext: st.line_chartforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","You can add rows to a table or more data to a plot in a Streamlit app by using the 'add_rows' method. For tables, you can pass the additional data as a parameter to the 'add_rows' method. For plots, you can add more data by passing the data as a parameter to the 'add_rows' method.",simple,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.bar_chart', 'title': 'st.bar_chart - Streamlit Docs'}]",True
How to improve user experience in Streamlit by delaying script rerun until related widgets are filled?,"['Execution flow - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowremovest.dialogst.formst.form_submit_buttonst.fragmentst.rerunst.stopCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Execution flowExecution flow\nChange execution\nBy default, Streamlit apps execute the script entirely, but we allow some functionality to handle control flow in your applications.\nModal dialogsInsert a modal dialog that can rerun independently from the rest of the script.@st.experimental_dialog(""Sign up"")\ndef email_form():\n    name = st.text_input(""Name"")\n    email = st.text_input(""Email"")\nPartial rerunsDefine a fragment to rerun independently from the rest of the script.@st.experimental_fragment(run_every=""10s"")\ndef fragment():\n    df = get_data()\n    st.line_chart(df)\nRerun scriptRerun the script immediately.st.rerun()\nStop executionStops execution immediately.st.stop()\n\nGroup multiple widgets\nBy default, Streamlit reruns your script everytime a user interacts with your app.\nHowever, sometimes it\'s a better user experience to wait until a group of related\nwidgets is filled before actually rerunning the script. That\'s what st.form is for!\nFormsCreate a form that batches elements together with a “Submit"" button.with st.form(key=\'my_form\'):\n    name = st.text_input(""Name"")\n    email = st.text_input(""Email"")\n    st.form_submit_button(""Sign up"")\nForm submit buttonDisplay a form submit button.with st.form(key=\'my_form\'):\n    name = st.text_input(""Name"")\n    email = st.text_input(""Email"")\n    st.form_submit_button(""Sign up"")\n\nThird-party componentsThese are featured components created by our lovely community. If you don\'t see what you\'re looking for, check out our Components Hub app and Streamlit Extras for more examples and inspiration!AutorefreshForce a refresh without tying up a script. Created by @kmcgrady.from streamlit_autorefresh import st_autorefresh\n\nst_autorefresh(interval=2000, limit=100,\n  key=""fizzbuzzcounter"")\nPydanticAuto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by @lukasmasuch.import streamlit_pydantic as sp\n\nsp.pydantic_form(key=""my_form"",\n  model=ExampleModel)\nStreamlit PagesAn experimental version of Streamlit Multi-Page Apps. Created by @blackary.from st_pages import Page, show_pages, add_page_title\n\nshow_pages([ Page(""streamlit_app.py"", ""Home"", ""🏠""),\n  Page(""other_pages/page2.py"", ""Page 2"", "":books:""), ])\nPrevious: Navigation and pagesNext: st.dialogforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","By default, Streamlit reruns your script everytime a user interacts with your app. However, sometimes it's a better user experience to wait until a group of related widgets is filled before actually rerunning the script. That's what st.form is for!",reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/execution-flow', 'title': 'Execution flow - Streamlit Docs'}]",True
How can I host multiple Streamlit apps on separate subdomains with traditional ports?,"[""Deployment Issues - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Knowledge base/Deployment issuesDeployment-related questions and errors\n\nHow do I deploy Streamlit on a domain so it appears to run on a regular port (i.e. port 80)?\nHow can I deploy multiple Streamlit apps on different subdomains?\nInvoking a Python subprocess in a deployed Streamlit app\nDoes Streamlit support the WSGI Protocol? (aka Can I deploy Streamlit with gunicorn?)\nArgh. This app has gone over its resource limits.\nApp is not loading when running remotely\nAuthentication without SSO\nUpgrade the Streamlit version of your app on Streamlit Community Cloud\nOrganizing your apps with workspaces on Streamlit Community Cloud\nHow do I increase the upload limit of st.file_uploader on Streamlit Community Cloud?\nUnable to edit or delete apps in Streamlit Community Cloud after modifying GitHub username\nHuh. This is isn't supposed to happen message after trying to log in\nView-only access to app after changing GitHub username or repository name\nLogin attempt to Streamlit Community Cloud fails with error 403\nHow to submit a support case for Streamlit Community Cloud\nPrevious: Installing dependenciesNext: Authentication without SSOforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy""]",,multi_context,"[{'source': 'https://docs.streamlit.io/knowledge-base/deploy', 'title': 'Deployment Issues - Streamlit Docs'}]",True
How can images be added to Streamlit apps with page navigation?,"['Media elements - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsremovest.audiost.imagest.logost.videoLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Media elementsMedia elements\nIt\'s easy to embed images, videos, and audio files directly into your Streamlit apps.\nImageDisplay an image or list of images.st.image(numpy_array)\nst.image(image_bytes)\nst.image(file)\nst.image(""https://example.com/myimage.jpg"")\nLogoDisplay a logo in the upper-left corner of your app and its sidebar.st.logo(""logo.jpg"")\nAudioDisplay an audio player.st.audio(numpy_array)\nst.audio(audio_bytes)\nst.audio(file)\nst.audio(""https://example.com/myaudio.mp3"", format=""audio/mp3"")\nVideoDisplay a video player.st.video(numpy_array)\nst.video(video_bytes)\nst.video(file)\nst.video(""https://example.com/myvideo.mp4"", format=""video/mp4"")\n\nThird-party componentsThese are featured components created by our lovely community. If you don\'t see what you\'re looking for, check out our Components Hub app and Streamlit Extras for more examples and inspiration! PreviousStreamlit CropperA simple image cropper for Streamlit. Created by @turner-anderson.from streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\nImage CoordinatesGet the coordinates of clicks on an image. Created by @blackary.from streamlit_image_coordinates import streamlit_image_coordinates\n\nstreamlit_image_coordinates(""https://placekitten.com/200/300"")\nStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.lottie_hello = load_lottieurl(""https://assets5.lottiefiles.com/packages/lf20_V9t630.json"")\n\nst_lottie(lottie_hello, key=""hello"")\nStreamlit WebrtcHandling and transmitting real-time video/audio streams with Streamlit. Created by @whitphx.from streamlit_webrtc import webrtc_streamer\n\nwebrtc_streamer(key=""sample"")\nDrawable CanvasProvides a sketching canvas using Fabric.js. Created by @andfanilo.from streamlit_drawable_canvas import st_canvas\n\nst_canvas(fill_color=""rgba(255, 165, 0, 0.3)"", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == \'point\' else 0, key=""canvas"",)\nImage ComparisonCompare images with a slider using JuxtaposeJS. Created by @fcakyon.from streamlit_image_comparison import image_comparison\n\nimage_comparison(img1=""image1.jpg"", img2=""image2.jpg"",)\nStreamlit CropperA simple image cropper for Streamlit. Created by @turner-anderson.from streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\nImage CoordinatesGet the coordinates of clicks on an image. Created by @blackary.from streamlit_image_coordinates import']","Images can be added to Streamlit apps using the st.image() function with parameters like numpy arrays, image bytes, or image files. Additionally, images can be displayed from URLs using st.image('https://example.com/myimage.jpg').",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/media', 'title': 'Media elements - Streamlit Docs'}]",True
"What is the role of the key parameter in st.plotly_chart in Streamlit, and how does it differ from st.bokeh_chart?","['st.plotly_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.plotly_chartst.plotly_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay an interactive Plotly chart.\nPlotly is a charting library for Python.\nThe arguments to this function closely follow the ones for Plotly\'s\nplot() function.\nTo show Plotly charts in Streamlit, call st.plotly_chart wherever\nyou would call Plotly\'s py.plot or py.iplot.\nFunction signature[source] st.plotly_chart(figure_or_data, use_container_width=False, *, theme=""streamlit"", key=None, on_select=""ignore"", selection_mode=(\'points\', \'box\', \'lasso\'), **kwargs) Parameters\n\nfigure_or_data\n(plotly.graph_objs.Figure, plotly.graph_objs.Data,            or dict/list of plotly.graph_objs.Figure/Data)\n\n \nThe Plotly Figure or Data object to render. See\nhttps://plot.ly/python/ for examples of graph descriptions.\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure\'s native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\n\n\ntheme\n(""streamlit"" or None)\n\n \nThe theme of the chart. If theme is ""streamlit"" (default),\nStreamlit uses its own design default. If theme is None,\nStreamlit falls back to the default behavior of the library.\n\n\nkey\n(str)\n\n \nAn optional string to use for giving this element a stable\nidentity. If key is None (default), this element\'s identity\nwill be determined based on the values of the other parameters.\nAdditionally, if selections are activated and key is provided,\nStreamlit will register the key in Session State to store the\nselection state. The selection state is read-only.\n\n\non_select\n(""ignore"" or ""rerun"" or callable)\n\n \nHow the figure should respond to user selection events. This\ncontrols whether or not the figure behaves like an input widget.\non_select can be one of the following:\n\n""ignore"" (default): Streamlit will not react to any selection\nevents in the chart. The figure will not behave like an input\nwidget.\n""rerun"": Streamlit will rerun the app when the user selects\ndata in the chart. In this case, st.plotly_chart will return\nthe selection data as a dictionary.\nA callable: Streamlit will rerun the app and execute the\ncallable as a callback']","The key parameter in st.plotly_chart is an optional string used to give the element a stable identity. If provided, Streamlit will register the key in Session State to store the selection state. This key parameter differs from st.bokeh_chart in that it allows for storing selection state, while st.bokeh_chart does not have this functionality.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.plotly_chart', 'title': 'st.plotly_chart - Streamlit Docs'}]",True
How to concatenate tables in Streamlit with `add_rows` and one dataset limit?,"[', **kwargs) Parameters\n\ndata\n(pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, Iterable, dict, or None)\n\n \nTable to concat. Optional.\n\n\n**kwargs\n(pandas.DataFrame, numpy.ndarray, Iterable, dict, or None)\n\n \nThe named dataset to concat. Optional. You can only pass in 1\ndataset (including the one in the data parameter).\nExample\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table = st.table(df1)\n\ndf2 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table.add_rows(df2)\n# Now the table shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nYou can do the same thing with plots. For example, if you want to add\nmore data to a line chart:\n\n# Assuming df1 and df2 from the example above still exist...\nmy_chart = st.line_chart(df1)\nmy_chart.add_rows(df2)\n# Now the chart shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nAnd for plots whose datasets are named, you can pass the data with a\nkeyword argument where the key is the name:\n\nmy_chart = st.vega_lite_chart({\n    \'mark\': \'line\',\n    \'encoding\': {\'x\': \'a\', \'y\': \'b\'},\n    \'datasets\': {\n      \'some_fancy_name\': df1,  # <-- named dataset\n     },\n    \'data\': {\'name\': \'some_fancy_name\'},\n}),\nmy_chart.add_rows(some_fancy_name=df2)  # <-- name used as keyword\n\n\nPrevious: st.area_chartNext: st.line_chartforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","You can concatenate tables in Streamlit with `add_rows` by passing one dataset at a time. This function allows you to add rows from another dataset to the existing table or chart, maintaining a single dataset limit.",conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.bar_chart', 'title': 'st.bar_chart - Streamlit Docs'}]",True
How to add more data to a line chart in Streamlit with only one dataset limit?,"[', **kwargs) Parameters\n\ndata\n(pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, Iterable, dict, or None)\n\n \nTable to concat. Optional.\n\n\n**kwargs\n(pandas.DataFrame, numpy.ndarray, Iterable, dict, or None)\n\n \nThe named dataset to concat. Optional. You can only pass in 1\ndataset (including the one in the data parameter).\nExample\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table = st.table(df1)\n\ndf2 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table.add_rows(df2)\n# Now the table shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nYou can do the same thing with plots. For example, if you want to add\nmore data to a line chart:\n\n# Assuming df1 and df2 from the example above still exist...\nmy_chart = st.line_chart(df1)\nmy_chart.add_rows(df2)\n# Now the chart shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nAnd for plots whose datasets are named, you can pass the data with a\nkeyword argument where the key is the name:\n\nmy_chart = st.vega_lite_chart({\n    \'mark\': \'line\',\n    \'encoding\': {\'x\': \'a\', \'y\': \'b\'},\n    \'datasets\': {\n      \'some_fancy_name\': df1,  # <-- named dataset\n     },\n    \'data\': {\'name\': \'some_fancy_name\'},\n}),\nmy_chart.add_rows(some_fancy_name=df2)  # <-- name used as keyword\n\n\nPrevious: st.area_chartNext: st.line_chartforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']",You can add more data to a line chart in Streamlit with only one dataset limit by using the add_rows method. This method allows you to concatenate additional data to the existing dataset in the line chart.,conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.bar_chart', 'title': 'st.bar_chart - Streamlit Docs'}]",True
How can Lottie animations be used in a Streamlit app with image coordinates?,"[' streamlit_image_coordinates\n\nstreamlit_image_coordinates(""https://placekitten.com/200/300"")\nStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.lottie_hello = load_lottieurl(""https://assets5.lottiefiles.com/packages/lf20_V9t630.json"")\n\nst_lottie(lottie_hello, key=""hello"")\nStreamlit WebrtcHandling and transmitting real-time video/audio streams with Streamlit. Created by @whitphx.from streamlit_webrtc import webrtc_streamer\n\nwebrtc_streamer(key=""sample"")\nDrawable CanvasProvides a sketching canvas using Fabric.js. Created by @andfanilo.from streamlit_drawable_canvas import st_canvas\n\nst_canvas(fill_color=""rgba(255, 165, 0, 0.3)"", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == \'point\' else 0, key=""canvas"",)\nImage ComparisonCompare images with a slider using JuxtaposeJS. Created by @fcakyon.from streamlit_image_comparison import image_comparison\n\nimage_comparison(img1=""image1.jpg"", img2=""image2.jpg"",)\nStreamlit CropperA simple image cropper for Streamlit. Created by @turner-anderson.from streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\nImage CoordinatesGet the coordinates of clicks on an image. Created by @blackary.from streamlit_image_coordinates import streamlit_image_coordinates\n\nstreamlit_image_coordinates(""https://placekitten.com/200/300"")\nStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.lottie_hello = load_lottieurl(""https://assets5.lottiefiles.com/packages/lf20_V9t630.json"")\n\nst_lottie(lottie_hello, key=""hello"")\n NextPrevious: Input widgetsNext: st.audioforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']",Lottie animations can be integrated into a Streamlit app by using the load_lottieurl function to load the animation URL and then displaying it using the st_lottie function with a specified key.,conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference/media', 'title': 'Media elements - Streamlit Docs'}]",True
How can custom color scales be defined and reflected in Plotly charts when using Streamlit with the default theme enabled or disabled?,"[' Streamlit theme enabled and disabled.\nBuilt with Streamlit 🎈Fullscreen open_in_new\nIf you\'re wondering if your own customizations will still be taken into account, don\'t worry! You can still make changes to your chart configurations. In other words, although we now enable the Streamlit theme by default, you can overwrite it with custom colors or fonts. For example, if you want a chart line to be green instead of the default red, you can do it!\nHere\'s an example of an Plotly chart where a custom color scale is defined and reflected:\nimport plotly.express as px\nimport streamlit as st\n\nst.subheader(""Define a custom colorscale"")\ndf = px.data.iris()\nfig = px.scatter(\n    df,\n    x=""sepal_width"",\n    y=""sepal_length"",\n    color=""sepal_length"",\n    color_continuous_scale=""reds"",\n)\n\ntab1, tab2 = st.tabs([""Streamlit theme (default)"", ""Plotly native theme""])\nwith tab1:\n    st.plotly_chart(fig, theme=""streamlit"", use_container_width=True)\nwith tab2:\n    st.plotly_chart(fig, theme=None, use_container_width=True)\n\nNotice how the custom color scale is still reflected in the chart, even when the Streamlit theme is enabled 👇\nBuilt with Streamlit 🎈Fullscreen open_in_new\nFor many more examples of Plotly charts with and without the Streamlit theme, check out the plotly.streamlit.app.Previous: st.graphviz_chartNext: st.pydeck_chartforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","Custom color scales can be defined and reflected in Plotly charts when using Streamlit with the default theme enabled or disabled by specifying the color_continuous_scale parameter in the Plotly chart configuration. This allows users to customize the color scale of the chart, overriding the default colors set by the Streamlit theme.",simple,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.plotly_chart', 'title': 'st.plotly_chart - Streamlit Docs'}]",True
What selection modes does Streamlit's plotly_chart function offer and how can they be activated?,"[' function before the rest of the app.\nIn this case, st.plotly_chart will return the selection data\nas a dictionary.\n\n\n\nselection_mode\n(""points"", ""box"", ""lasso"" or an Iterable of these)\n\n \nThe selection mode of the chart. This can be one of the following:\n\n""points"": The chart will allow selections based on individual\ndata points.\n""box"": The chart will allow selections based on rectangular\nareas.\n""lasso"": The chart will allow selections based on freeform\nareas.\nAn Iterable of the above options: The chart will allow\nselections based on the modes specified.\n\nAll selections modes are activated by default.\n\n\n**kwargs\n(null)\n\n \nAny argument accepted by Plotly\'s plot() function.\nReturns(element or dict)  If on_select is ""ignore"" (default), this method returns an\ninternal placeholder for the chart element. Otherwise, this method\nreturns a dictionary-like object that supports both key and\nattribute notation. The attributes are described by the\nPlotlyState dictionary schema.\nExample\nThe example below comes straight from the examples at\nhttps://plot.ly/python. Note that plotly.figure_factory requires\nscipy to run.\n\nimport streamlit as st\nimport numpy as np\nimport plotly.figure_factory as ff\n\n# Add histogram data\nx1 = np.random.randn(200) - 2\nx2 = np.random.randn(200)\nx3 = np.random.randn(200) + 2\n\n# Group data together\nhist_data = [x1, x2, x3]\n\ngroup_labels = [\'Group 1\', \'Group 2\', \'Group 3\']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(\n        hist_data, group_labels, bin_size=[.1, .25, .5])\n\n# Plot!\nst.plotly_chart(fig, use_container_width=True)\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\n\nChart selections\nPlotlyStateStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeThe schema for the Plotly chart event state.\nThe event state is stored in a dictionary-like object that suports both\nkey and attribute notation. Event states cannot be programmatically\nchanged or set through Session State.\nOnly selection events are supported at this time.\nAttributes\n\nselection\n(dict)\n\n \n\nThe state of the on_select event. This attribure returns a\ndictionary-like object that supports both key and attribute\nnotation. The attributes are described by the\nPlotlySelectionState dictionary schema.\n\nExampleTry selecting points by any of the three available methods (direct click,\nbox, or lasso). The current selection state is available through Session\nState or as the output of the chart function.\n\nimport streamlit as st\nimport plotly.express as px\n\ndf = px.data.iris()  # iris is a pandas DataFrame\nfig = px.scatter(df, x=""sepal_width"", y=""sepal_length"")\n\nevent = st.plotly_chart(fig, key=""iris"", on_select=""rerun"")\n\nevent\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\nPlotlySelectionStateStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version']","The selection modes offered by Streamlit's plotly_chart function are 'points', 'box', 'lasso', or an Iterable of these options. These modes can be activated by specifying the selection_mode parameter with one of the mentioned options.",reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.plotly_chart', 'title': 'st.plotly_chart - Streamlit Docs'}]",True
What are the parameters for st.bokeh_chart and st.plotly_chart in Streamlit?,"[""st.bokeh_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.bokeh_chartst.bokeh_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay an interactive Bokeh chart.\nBokeh is a charting library for Python. The arguments to this function\nclosely follow the ones for Bokeh's show function. You can find\nmore about Bokeh at https://bokeh.pydata.org.\nTo show Bokeh charts in Streamlit, call st.bokeh_chart\nwherever you would call Bokeh's show.\nFunction signature[source] st.bokeh_chart(figure, use_container_width=False) Parameters\n\nfigure\n(bokeh.plotting.figure.Figure)\n\n \nA Bokeh figure to plot.\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure's native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\nExample\n\nimport streamlit as st\nfrom bokeh.plotting import figure\n\nx = [1, 2, 3, 4, 5]\ny = [6, 7, 2, 4, 5]\n\np = figure(\n    title='simple line example',\n    x_axis_label='x',\n    y_axis_label='y')\n\np.line(x, y, legend_label='Trend', line_width=2)\n\nst.bokeh_chart(p, use_container_width=True)\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\nPrevious: st.altair_chartNext: st.graphviz_chartforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy"", 'st.plotly_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.plotly_chartst.plotly_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay an interactive Plotly chart.\nPlotly is a charting library for Python.\nThe arguments to this function closely follow the ones for Plotly\'s\nplot() function.\nTo show Plotly charts in Streamlit, call st.plotly_chart wherever\nyou would call Plotly\'s py.plot or py.iplot.\nFunction signature[source] st.plotly_chart(figure_or_data, use_container_width=False, *, theme=""streamlit"", key=None, on_select=""ignore"", selection_mode=(\'points\', \'box\', \'lasso\'), **kwargs) Parameters\n\nfigure_or_data\n(plotly.graph_objs.Figure, plotly.graph_objs.Data,            or dict/list of plotly.graph_objs.Figure/Data)\n\n \nThe Plotly Figure or Data object to render. See\nhttps://plot.ly/python/ for examples of graph descriptions.\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure\'s native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\n\n\ntheme\n(""streamlit"" or None)\n\n \nThe theme of the chart. If theme is ""streamlit"" (default),\nStreamlit uses its own design default. If theme is None,\nStreamlit falls back to the default behavior of the library.\n\n\nkey\n(str)\n\n \nAn optional string to use for giving this element a stable\nidentity. If key is None (default), this element\'s identity\nwill be determined based on the values of the other parameters.\nAdditionally, if selections are activated and key is provided,\nStreamlit will register the key in Session State to store the\nselection state. The selection state is read-only.\n\n\non_select\n(""ignore"" or ""rerun"" or callable)\n\n \nHow the figure should respond to user selection events. This\ncontrols whether or not the figure behaves like an input widget.\non_select can be one of the following:\n\n""ignore"" (default): Streamlit will not react to any selection\nevents in the chart. The figure will not behave like an input\nwidget.\n""rerun"": Streamlit will rerun the app when the user selects\ndata in the chart. In this case, st.plotly_chart will return\nthe selection data as a dictionary.\nA callable: Streamlit will rerun the app and execute the\ncallable as a callback']","st.bokeh_chart has parameters 'figure' and 'use_container_width'. st.plotly_chart has parameters 'figure_or_data', 'use_container_width', 'theme', 'key', 'on_select', and 'selection_mode'.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.bokeh_chart', 'title': 'st.bokeh_chart - Streamlit Docs'}, {'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.plotly_chart', 'title': 'st.plotly_chart - Streamlit Docs'}]",True
Which third-party component enables real-time video/audio stream handling and a sketching canvas in Streamlit?,"['Media elements - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsremovest.audiost.imagest.logost.videoLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Media elementsMedia elements\nIt\'s easy to embed images, videos, and audio files directly into your Streamlit apps.\nImageDisplay an image or list of images.st.image(numpy_array)\nst.image(image_bytes)\nst.image(file)\nst.image(""https://example.com/myimage.jpg"")\nLogoDisplay a logo in the upper-left corner of your app and its sidebar.st.logo(""logo.jpg"")\nAudioDisplay an audio player.st.audio(numpy_array)\nst.audio(audio_bytes)\nst.audio(file)\nst.audio(""https://example.com/myaudio.mp3"", format=""audio/mp3"")\nVideoDisplay a video player.st.video(numpy_array)\nst.video(video_bytes)\nst.video(file)\nst.video(""https://example.com/myvideo.mp4"", format=""video/mp4"")\n\nThird-party componentsThese are featured components created by our lovely community. If you don\'t see what you\'re looking for, check out our Components Hub app and Streamlit Extras for more examples and inspiration! PreviousStreamlit CropperA simple image cropper for Streamlit. Created by @turner-anderson.from streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\nImage CoordinatesGet the coordinates of clicks on an image. Created by @blackary.from streamlit_image_coordinates import streamlit_image_coordinates\n\nstreamlit_image_coordinates(""https://placekitten.com/200/300"")\nStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.lottie_hello = load_lottieurl(""https://assets5.lottiefiles.com/packages/lf20_V9t630.json"")\n\nst_lottie(lottie_hello, key=""hello"")\nStreamlit WebrtcHandling and transmitting real-time video/audio streams with Streamlit. Created by @whitphx.from streamlit_webrtc import webrtc_streamer\n\nwebrtc_streamer(key=""sample"")\nDrawable CanvasProvides a sketching canvas using Fabric.js. Created by @andfanilo.from streamlit_drawable_canvas import st_canvas\n\nst_canvas(fill_color=""rgba(255, 165, 0, 0.3)"", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == \'point\' else 0, key=""canvas"",)\nImage ComparisonCompare images with a slider using JuxtaposeJS. Created by @fcakyon.from streamlit_image_comparison import image_comparison\n\nimage_comparison(img1=""image1.jpg"", img2=""image2.jpg"",)\nStreamlit CropperA simple image cropper for Streamlit. Created by @turner-anderson.from streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\nImage CoordinatesGet the coordinates of clicks on an image. Created by @blackary.from streamlit_image_coordinates import']","Streamlit Webrtc enables real-time video/audio stream handling, while Drawable Canvas provides a sketching canvas in Streamlit.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/media', 'title': 'Media elements - Streamlit Docs'}]",True
How does Streamlit app testing framework help with headless tests and which class is used for simulating app behavior and API inspections?,"['App testing - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingremovest.testing.v1.AppTestTesting element classesCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/App testingApp testing\nStreamlit app testing framework enables developers to build and run headless tests that execute their app code directly, simulate user input, and inspect rendered outputs for correctness.\nThe provided class, AppTest, simulates a running app and provides methods to set up, manipulate, and inspect the app contents via API instead of a browser UI. It can be used to write automated tests of an app in various scenarios. These can then be run using a tool like pytest. A typical pattern is to build a suite of tests for an app that ensure consistent functionality as the app evolves, and run the tests locally and/or in a CI environment like Github Actions.\nThe AppTest class\nst.testing.v1.AppTestst.testing.v1.AppTest simulates a running Streamlit app for testing.from streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(""streamlit_app.py"")\nat.secrets[""WORD""] = ""Foobar""\nat.run()\nassert not at.exception\n\nat.text_input(""word"").input(""Bazbat"").run()\nassert at.warning[0].value == ""Try again.""\nAppTest.from_filest.testing.v1.AppTest.from_file initializes a simulated app from a file.from streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(""streamlit_app.py"")\nat.secrets[""WORD""] = ""Foobar""\nat.run()\nassert not at.exception\nAppTest.from_stringst.testing.v1.AppTest.from_string initializes a simulated app from a string.from streamlit.testing.v1 import AppTest\n\napp_script = """"""\nimport streamlit as st\n\nword_of_the_day = st.text_input(""What\'s the word of the day?"", key=""word"")\nif word_of_the_day == st.secrets[""WORD""]:\n    st.success(""That\'s right!"")\nelif word_of_the_day and word_of_the_day != st.secrets[""WORD""]:\n    st.warn(""Try again."")\n""""""\n\nat = AppTest.from_string(app_script)\nat.secrets[""WORD""] = ""Foobar""\nat.run()\nassert not at.exception\nAppTest.from_functionst.testing.v1.AppTest.from_function initializes a simulated app from a function.from streamlit.testing.v1 import AppTest\n\ndef app_script ():\n    import streamlit as st\n\n    word_of_the_day = st.text_input(""What\'s the word of the day?"", key=""word"")\n    if word_of_the_day == st.secrets[""WORD""]:\n        st.success(""That\'s right!"")\n    elif word_of_the_day and word_of_the_day != st.secrets[""WORD""]:\n        st.warn(""Try again."")\n\nat = AppTest.from_function(app_script)\nat.secrets[""WORD""] = ""Foobar""\nat.run()\nassert not at.exception\n\nTesting-element classes\nBlockA representation of container elements, including:\nst.chat_message\nst.columns\nst.sidebar\nst.tabs\nThe main body of the app.\n# at.sidebar returns a Block\nat.sidebar.button[0].click().run()\nassert not at.exception\nElementThe base class for representation of all elements, including']","Streamlit app testing framework enables developers to build and run headless tests that execute their app code directly, simulate user input, and inspect rendered outputs for correctness. The provided class, AppTest, simulates a running app and provides methods to set up, manipulate, and inspect the app contents via API instead of a browser UI.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/app-testing', 'title': 'App testing - Streamlit Docs'}]",True
How to connect to data source or API in Streamlit with caching and session state?,"['ary.from st_pages import Page, show_pages, add_page_title\n\nshow_pages([ Page(""streamlit_app.py"", ""Home"", ""🏠""),\n  Page(""other_pages/page2.py"", ""Page 2"", "":books:""), ])\n\nCaching and state\n\nCache dataFunction decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).@st.cache_data\ndef long_function(param1, param2):\n  # Perform expensive computation here or\n  # fetch data from the web here\n  return data\nCache resourceFunction decorator to cache functions that return global resources (e.g. database connections, ML models).@st.cache_resource\ndef init_model():\n  # Return a global resource here\n  return pipeline(\n    ""sentiment-analysis"",\n    model=""distilbert-base-uncased-finetuned-sst-2-english""\n  )\nSession stateSession state is a way to share variables between reruns, for each user session.st.session_state[\'key\'] = value\nQuery parametersGet, set, or clear the query parameters that are shown in the browser\'s URL bar.st.query_params[key] = value\nst.query_params.clear()\n\nConnections and databases\nSetup your connection\nCreate a connectionConnect to a data source or APIconn = st.connection(\'pets_db\', type=\'sql\')\npet_owners = conn.query(\'select * from pet_owners\')\nst.dataframe(pet_owners)\n\nBuilt-in connections\nSnowflakeConnectionA connection to Snowflake.conn = st.connection(\'snowflake\')\nSQLConnectionA connection to a SQL database using SQLAlchemy.conn = st.connection(\'sql\')\n\nBuild your own connections\nConnection base classBuild your own connection with BaseConnection.class MyConnection(BaseConnection[myconn.MyConnection]):\n    def _connect(self, **kwargs) -> MyConnection:\n        return myconn.connect(**self._secrets, **kwargs)\n    def query(self, query):\n        return self._instance.query(query)\n\nSecrets management\nSecrets singletonAccess secrets from a local TOML file.key = st.secrets[""OpenAI_key""]\nSecrets fileSave your secrets in a per-project or per-profile TOML file.OpenAI_key = ""<YOUR_SECRET_KEY>""\n\nThird-party componentsThese are featured components created by our lovely community. If you don\'t see what you\'re looking for, check out our Components Hub app and Streamlit Extras for more examples and inspiration!AuthenticatorA secure authentication module to validate user credentials. Created by @mkhorasani.import streamlit_authenticator as stauth\n\nauthenticator = stauth.Authenticate( config[\'credentials\'], config[\'cookie\'][\'name\'],\nconfig[\'cookie\'][\'key\'], config[\'cookie\'][\'expiry_days\'], config[\'preauthorized\'])\nWS localStorageA simple synchronous way of accessing localStorage from your app. Created by @gagangoku.from streamlit_ws_localstorage import injectWebsocketCode\n\nret = conn.setLocalStorageVal(key=\'k1\', val=\'v1\')\nst.write(\'ret: \' + ret)\nStreamlit Auth0The fastest way to provide comprehensive login inside Streamlit. Created by @conradbez.from auth0_component import login_button\n\nuser_info = login_button(clientId, domain = domain)\nst.write(user_info)\n\nCustom Components\n\nDeclare a componentCreate and register a custom component.st.components.v1.declare_component(\n    ""custom_slider"",\n    ""/frontend"",\n)\nHTMLDisplay an HTML string in an iframe.st.components.v1.html(\n    ""<p>Foo bar.</p>""\n)\niframeLoad a remote URL in an iframe.st.components.v1.iframe(\n    ""docs.streamlit.io""\n)\n\nUtilities and user info\n\nUser infost.experimental_user returns information about the logged-in user of private apps on Streamlit Community Cloud.if st.experimental_user.email == ""foo@corp.com"":\n  st.write(""Welcome back, "", st.experimental_user.email)\nelse']","Create a connection to a data source or API using 'st.connection' and utilize caching with 'st.cache_data' decorator for functions that return data. Additionally, use session state to share variables between reruns.",conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference', 'title': 'API Reference - Streamlit Docs'}]",True
How can I deploy multiple Streamlit apps on different subdomains while running on port 80?,"[""Deployment Issues - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Knowledge base/Deployment issuesDeployment-related questions and errors\n\nHow do I deploy Streamlit on a domain so it appears to run on a regular port (i.e. port 80)?\nHow can I deploy multiple Streamlit apps on different subdomains?\nInvoking a Python subprocess in a deployed Streamlit app\nDoes Streamlit support the WSGI Protocol? (aka Can I deploy Streamlit with gunicorn?)\nArgh. This app has gone over its resource limits.\nApp is not loading when running remotely\nAuthentication without SSO\nUpgrade the Streamlit version of your app on Streamlit Community Cloud\nOrganizing your apps with workspaces on Streamlit Community Cloud\nHow do I increase the upload limit of st.file_uploader on Streamlit Community Cloud?\nUnable to edit or delete apps in Streamlit Community Cloud after modifying GitHub username\nHuh. This is isn't supposed to happen message after trying to log in\nView-only access to app after changing GitHub username or repository name\nLogin attempt to Streamlit Community Cloud fails with error 403\nHow to submit a support case for Streamlit Community Cloud\nPrevious: Installing dependenciesNext: Authentication without SSOforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy""]",,conditional,"[{'source': 'https://docs.streamlit.io/knowledge-base/deploy', 'title': 'Deployment Issues - Streamlit Docs'}]",True
"What does the PlotlyState dictionary schema describe for ""points"" selection mode?","[' function before the rest of the app.\nIn this case, st.plotly_chart will return the selection data\nas a dictionary.\n\n\n\nselection_mode\n(""points"", ""box"", ""lasso"" or an Iterable of these)\n\n \nThe selection mode of the chart. This can be one of the following:\n\n""points"": The chart will allow selections based on individual\ndata points.\n""box"": The chart will allow selections based on rectangular\nareas.\n""lasso"": The chart will allow selections based on freeform\nareas.\nAn Iterable of the above options: The chart will allow\nselections based on the modes specified.\n\nAll selections modes are activated by default.\n\n\n**kwargs\n(null)\n\n \nAny argument accepted by Plotly\'s plot() function.\nReturns(element or dict)  If on_select is ""ignore"" (default), this method returns an\ninternal placeholder for the chart element. Otherwise, this method\nreturns a dictionary-like object that supports both key and\nattribute notation. The attributes are described by the\nPlotlyState dictionary schema.\nExample\nThe example below comes straight from the examples at\nhttps://plot.ly/python. Note that plotly.figure_factory requires\nscipy to run.\n\nimport streamlit as st\nimport numpy as np\nimport plotly.figure_factory as ff\n\n# Add histogram data\nx1 = np.random.randn(200) - 2\nx2 = np.random.randn(200)\nx3 = np.random.randn(200) + 2\n\n# Group data together\nhist_data = [x1, x2, x3]\n\ngroup_labels = [\'Group 1\', \'Group 2\', \'Group 3\']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(\n        hist_data, group_labels, bin_size=[.1, .25, .5])\n\n# Plot!\nst.plotly_chart(fig, use_container_width=True)\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\n\nChart selections\nPlotlyStateStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeThe schema for the Plotly chart event state.\nThe event state is stored in a dictionary-like object that suports both\nkey and attribute notation. Event states cannot be programmatically\nchanged or set through Session State.\nOnly selection events are supported at this time.\nAttributes\n\nselection\n(dict)\n\n \n\nThe state of the on_select event. This attribure returns a\ndictionary-like object that supports both key and attribute\nnotation. The attributes are described by the\nPlotlySelectionState dictionary schema.\n\nExampleTry selecting points by any of the three available methods (direct click,\nbox, or lasso). The current selection state is available through Session\nState or as the output of the chart function.\n\nimport streamlit as st\nimport plotly.express as px\n\ndf = px.data.iris()  # iris is a pandas DataFrame\nfig = px.scatter(df, x=""sepal_width"", y=""sepal_length"")\n\nevent = st.plotly_chart(fig, key=""iris"", on_select=""rerun"")\n\nevent\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\nPlotlySelectionStateStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version']",The PlotlyState dictionary schema describes the state of the on_select event for 'points' selection mode. This attribute returns a dictionary-like object that supports both key and attribute notation.,conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.plotly_chart', 'title': 'st.plotly_chart - Streamlit Docs'}]",True
How can text elements be displayed in a Streamlit app using st.write and magic commands?,"['st.write and magic commands - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicremovest.writest.write_streammagicText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Write and magicst.write and magic commands\nStreamlit has two easy ways to display information into your app, which should typically be the\nfirst thing you try: st.write and magic.\nst.writeWrite arguments to the app.st.write(""Hello **world**!"")\nst.write(my_data_frame)\nst.write(my_mpl_figure)\nst.write_streamWrite generators or streams to the app with a typewriter effect.st.write_stream(my_generator)\nst.write_stream(my_llm_stream)\nMagicAny time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using st.write""Hello **world**!""\nmy_data_frame\nmy_mpl_figure\nPrevious: API referenceNext: st.writeforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","Text elements can be displayed in a Streamlit app using st.write and magic commands. With st.write, you can write arguments directly to the app like st.write(""Hello **world**!"") or display data frames and Matplotlib figures. Magic in Streamlit automatically writes variables or literal values to the app when they are on their own line.",simple,"[{'source': 'https://docs.streamlit.io/develop/api-reference/write-magic', 'title': 'st.write and magic commands - Streamlit Docs'}]",True
How can users interact with chart annotations using emojis?,"['      x=""date"",\n            y=""price"",\n            color=""symbol"",\n        )\n    )\n\n    # Draw points on the line, and highlight based on selection\n    points = lines.transform_filter(hover).mark_circle(size=65)\n\n    # Draw a rule at the location of the selection\n    tooltips = (\n        alt.Chart(data)\n        .mark_rule()\n        .encode(\n            x=""yearmonthdate(date)"",\n            y=""price"",\n            opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),\n            tooltip=[\n                alt.Tooltip(""date"", title=""Date""),\n                alt.Tooltip(""price"", title=""Price (USD)""),\n            ],\n        )\n        .add_selection(hover)\n    )\n    return (lines + points + tooltips).interactive()\n\nchart = get_chart(source)\n\nStep 2: Annotate the chart\nNow that we have our first chart that shows the data, we can annotate it with text and an emoji. Let\'s overlay the ⬇ emoji on top of the time-series chart at specifc points of interest. We want users to hover over the ⬇ emoji to see the associated annotation text.\nFor simplicity, let\'s annotate four specific dates and set the height of the annotations at constant value of 10.\nstarTipYou can vary the horizontal and vertical postions of the annotations by replacing the hard-coded values with the output of Streamlit widgets! Click here to jump to a live example below, and develop an intuition for the ideal horizontal and vertical positions of the annotations by playing with Streamlit widgets.\nTo do so, we create a dataframe annotations_df containing the dates, annotation text, and the height of the annotations:\n# Add annotations\nANNOTATIONS = [\n    (""Mar 01, 2008"", ""Pretty good day for GOOG""),\n    (""Dec 01, 2007"", ""Something\'s going wrong for GOOG & AAPL""),\n    (""Nov 01, 2008"", ""Market starts again thanks to...""),\n    (""Dec 01, 2009"", ""Small crash for GOOG after...""),\n]\nannotations_df = pd.DataFrame(ANNOTATIONS, columns=[""date"", ""event""])\nannotations_df.date = pd.to_datetime(annotations_df.date)\nannotations_df[""y""] = 10\n\nUsing this dataframe, we create a scatter plot with the x-axis representing the date, and the y-axis representing the height of the annotation. The data point at the specific date and height is represented by the ⬇ emoji, using Altair\'s mark_text() mark.\nThe annotation text is displayed as a tooltip when users hover over the ⬇ emoji. This is achieved using Altair\'s encode() method to map the event column containing the annotation text to the visual attribute ⬇ of the plot.\nannotation_layer = (\n    alt.Chart(annotations_df)\n    .mark_text(size=20, text=""⬇"", dx=-8, dy=-10, align=""left"")\n    .encode(\n        x=""date:T"",\n        y=alt.Y(""y:Q""),\n        tooltip=[""event""],\n    )\n    .interactive()\n)\n\nFinally, we overlay the annotations on top of the base chart using the + operator to create the final layered chart! 🎈\nst.altair_chart(\n    (chart + annotation_layer).interactive(),\n    use_container_width=True\n)\n\n\nTo use images instead of emojis, replace the line containing .mark_text() with .mark_image(), and replace image_']","Users can interact with chart annotations using emojis by hovering over the emojis to see the associated annotation text. The emojis are placed at specific points of interest on the time-series chart, and when hovered over, the annotation text is displayed as a tooltip.",reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}]",True
How can user selection events trigger app rerun in Altair charts using st.altair_chart in Streamlit?,"['st.altair_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.altair_chartst.altair_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay a chart using the Vega-Altair library.\nVega-Altair is a declarative\nstatistical visualization library for Python, based on Vega and\nVega-Lite.\nFunction signature[source] st.altair_chart(altair_chart, *, use_container_width=False, theme=""streamlit"", key=None, on_select=""ignore"", selection_mode=None) Parameters\n\naltair_chart\n(altair.Chart)\n\n \nThe Altair chart object to display. See\nhttps://altair-viz.github.io/gallery/ for examples of graph\ndescriptions.\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure\'s native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\n\n\ntheme\n(""streamlit"" or None)\n\n \nThe theme of the chart. If theme is ""streamlit"" (default),\nStreamlit uses its own design default. If theme is None,\nStreamlit falls back to the default behavior of the library.\n\n\nkey\n(str)\n\n \nAn optional string to use for giving this element a stable\nidentity. If key is None (default), this element\'s identity\nwill be determined based on the values of the other parameters.\nAdditionally, if selections are activated and key is provided,\nStreamlit will register the key in Session State to store the\nselection state. The selection state is read-only.\n\n\non_select\n(""ignore"", ""rerun"", or callable)\n\n \nHow the figure should respond to user selection events. This\ncontrols whether or not the figure behaves like an input widget.\non_select can be one of the following:\n\n""ignore"" (default): Streamlit will not react to any selection\nevents in the chart. The figure will not behave like an input\nwidget.\n""rerun"": Streamlit will rerun the app when the user selects\ndata in the chart. In this case, st.altair_chart will return\nthe selection data as a dictionary.\nA callable: Streamlit will rerun the app and execute the\ncallable as a callback function before the rest of the app.\nIn this case, st.altair_chart will return the selection data\nas a dictionary.\n\nTo use selection events, the object passed to altair_chart must\ninclude selection paramters. To learn about defining interactions\nin Altair and how to declare selection-type parameters, see\nInteractive Charts\nin Altair\'s documentation']","User selection events can trigger app rerun in Altair charts using st.altair_chart in Streamlit by setting the 'on_select' parameter to 'rerun'. This will cause the app to rerun when the user selects data in the chart, and st.altair_chart will return the selection data as a dictionary.",reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}]",True
How does Altair library help with interactive charts in Python and what parameters can be adjusted in st.altair_chart in Streamlit?,"['st.altair_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.altair_chartst.altair_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay a chart using the Vega-Altair library.\nVega-Altair is a declarative\nstatistical visualization library for Python, based on Vega and\nVega-Lite.\nFunction signature[source] st.altair_chart(altair_chart, *, use_container_width=False, theme=""streamlit"", key=None, on_select=""ignore"", selection_mode=None) Parameters\n\naltair_chart\n(altair.Chart)\n\n \nThe Altair chart object to display. See\nhttps://altair-viz.github.io/gallery/ for examples of graph\ndescriptions.\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure\'s native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\n\n\ntheme\n(""streamlit"" or None)\n\n \nThe theme of the chart. If theme is ""streamlit"" (default),\nStreamlit uses its own design default. If theme is None,\nStreamlit falls back to the default behavior of the library.\n\n\nkey\n(str)\n\n \nAn optional string to use for giving this element a stable\nidentity. If key is None (default), this element\'s identity\nwill be determined based on the values of the other parameters.\nAdditionally, if selections are activated and key is provided,\nStreamlit will register the key in Session State to store the\nselection state. The selection state is read-only.\n\n\non_select\n(""ignore"", ""rerun"", or callable)\n\n \nHow the figure should respond to user selection events. This\ncontrols whether or not the figure behaves like an input widget.\non_select can be one of the following:\n\n""ignore"" (default): Streamlit will not react to any selection\nevents in the chart. The figure will not behave like an input\nwidget.\n""rerun"": Streamlit will rerun the app when the user selects\ndata in the chart. In this case, st.altair_chart will return\nthe selection data as a dictionary.\nA callable: Streamlit will rerun the app and execute the\ncallable as a callback function before the rest of the app.\nIn this case, st.altair_chart will return the selection data\nas a dictionary.\n\nTo use selection events, the object passed to altair_chart must\ninclude selection paramters. To learn about defining interactions\nin Altair and how to declare selection-type parameters, see\nInteractive Charts\nin Altair\'s documentation']","The Altair library helps create interactive charts in Python by allowing users to define selection parameters for interactive elements. In Streamlit, the st.altair_chart function allows users to adjust parameters such as use_container_width, theme, key, and on_select to customize the display and behavior of the Altair chart.",reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}]",True
What are the main ways to display info and access user data in a Streamlit app?,"['st.write and magic commands - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicremovest.writest.write_streammagicText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Write and magicst.write and magic commands\nStreamlit has two easy ways to display information into your app, which should typically be the\nfirst thing you try: st.write and magic.\nst.writeWrite arguments to the app.st.write(""Hello **world**!"")\nst.write(my_data_frame)\nst.write(my_mpl_figure)\nst.write_streamWrite generators or streams to the app with a typewriter effect.st.write_stream(my_generator)\nst.write_stream(my_llm_stream)\nMagicAny time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using st.write""Hello **world**!""\nmy_data_frame\nmy_mpl_figure\nPrevious: API referenceNext: st.writeforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","The main ways to display information and access user data in a Streamlit app are using st.write and magic commands. st.write allows you to write arguments, data frames, and matplotlib figures to the app, while magic automatically writes variables or literal values to the app.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/write-magic', 'title': 'st.write and magic commands - Streamlit Docs'}]",True
"How to display text dynamically in a Streamlit app with st.write and magic commands, including user info and placeholders?","['st.write and magic commands - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicremovest.writest.write_streammagicText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Write and magicst.write and magic commands\nStreamlit has two easy ways to display information into your app, which should typically be the\nfirst thing you try: st.write and magic.\nst.writeWrite arguments to the app.st.write(""Hello **world**!"")\nst.write(my_data_frame)\nst.write(my_mpl_figure)\nst.write_streamWrite generators or streams to the app with a typewriter effect.st.write_stream(my_generator)\nst.write_stream(my_llm_stream)\nMagicAny time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using st.write""Hello **world**!""\nmy_data_frame\nmy_mpl_figure\nPrevious: API referenceNext: st.writeforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","Streamlit provides two easy ways to display information dynamically in your app: st.write and magic commands. With st.write, you can write arguments directly to the app, such as text, data frames, or Matplotlib figures. Additionally, st.write_stream allows you to write generators or streams with a typewriter effect. On the other hand, magic commands automatically display variables or literal values on their own line using st.write. This feature is useful for displaying user information and placeholders dynamically in your Streamlit app.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/write-magic', 'title': 'st.write and magic commands - Streamlit Docs'}]",True
What role does annotation text play in charts and how does it improve data visualization?,"['      x=""date"",\n            y=""price"",\n            color=""symbol"",\n        )\n    )\n\n    # Draw points on the line, and highlight based on selection\n    points = lines.transform_filter(hover).mark_circle(size=65)\n\n    # Draw a rule at the location of the selection\n    tooltips = (\n        alt.Chart(data)\n        .mark_rule()\n        .encode(\n            x=""yearmonthdate(date)"",\n            y=""price"",\n            opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),\n            tooltip=[\n                alt.Tooltip(""date"", title=""Date""),\n                alt.Tooltip(""price"", title=""Price (USD)""),\n            ],\n        )\n        .add_selection(hover)\n    )\n    return (lines + points + tooltips).interactive()\n\nchart = get_chart(source)\n\nStep 2: Annotate the chart\nNow that we have our first chart that shows the data, we can annotate it with text and an emoji. Let\'s overlay the ⬇ emoji on top of the time-series chart at specifc points of interest. We want users to hover over the ⬇ emoji to see the associated annotation text.\nFor simplicity, let\'s annotate four specific dates and set the height of the annotations at constant value of 10.\nstarTipYou can vary the horizontal and vertical postions of the annotations by replacing the hard-coded values with the output of Streamlit widgets! Click here to jump to a live example below, and develop an intuition for the ideal horizontal and vertical positions of the annotations by playing with Streamlit widgets.\nTo do so, we create a dataframe annotations_df containing the dates, annotation text, and the height of the annotations:\n# Add annotations\nANNOTATIONS = [\n    (""Mar 01, 2008"", ""Pretty good day for GOOG""),\n    (""Dec 01, 2007"", ""Something\'s going wrong for GOOG & AAPL""),\n    (""Nov 01, 2008"", ""Market starts again thanks to...""),\n    (""Dec 01, 2009"", ""Small crash for GOOG after...""),\n]\nannotations_df = pd.DataFrame(ANNOTATIONS, columns=[""date"", ""event""])\nannotations_df.date = pd.to_datetime(annotations_df.date)\nannotations_df[""y""] = 10\n\nUsing this dataframe, we create a scatter plot with the x-axis representing the date, and the y-axis representing the height of the annotation. The data point at the specific date and height is represented by the ⬇ emoji, using Altair\'s mark_text() mark.\nThe annotation text is displayed as a tooltip when users hover over the ⬇ emoji. This is achieved using Altair\'s encode() method to map the event column containing the annotation text to the visual attribute ⬇ of the plot.\nannotation_layer = (\n    alt.Chart(annotations_df)\n    .mark_text(size=20, text=""⬇"", dx=-8, dy=-10, align=""left"")\n    .encode(\n        x=""date:T"",\n        y=alt.Y(""y:Q""),\n        tooltip=[""event""],\n    )\n    .interactive()\n)\n\nFinally, we overlay the annotations on top of the base chart using the + operator to create the final layered chart! 🎈\nst.altair_chart(\n    (chart + annotation_layer).interactive(),\n    use_container_width=True\n)\n\n\nTo use images instead of emojis, replace the line containing .mark_text() with .mark_image(), and replace image_', '            title=""Maximum Daily Temperature (C)"",\n            scale=alt.Scale(domain=[-5, 40]),\n        ),\n        color=alt.condition(brush, color, alt.value(""lightgray"")),\n        size=alt.Size(""precipitation:Q"", scale=alt.Scale(range=[5, 200])),\n    )\n    .properties(width=550, height=300)\n    .add_selection(brush)\n    .transform_filter(click)\n)\n\n# Bottom panel is a bar chart of weather type\nbars = (\n    alt.Chart()\n    .mark_bar()\n    .encode(\n        x=""count()"",\n        y=""weather:N"",\n        color=alt.condition(click, color, alt.value(""lightgray"")),\n    )\n    .transform_filter(brush)\n    .properties(\n        width=550,\n    )\n    .add_selection(click)\n)\n\nchart = alt.vconcat(points, bars, data=source, title=""Seattle Weather: 2012-2015"")\n\ntab1, tab2 = st.tabs([""Streamlit theme (default)"", ""Altair native theme""])\n\nwith tab1:\n    st.altair_chart(chart, theme=""streamlit"", use_container_width=True)\nwith tab2:\n    st.altair_chart(chart, theme=None, use_container_width=True)\n\nNotice how the custom colors are still reflected in the chart, even when the Streamlit theme is enabled 👇\nBuilt with Streamlit 🎈Fullscreen open_in_new\nFor many more examples of Altair charts with and without the Streamlit theme, check out the altair.streamlit.app.\nAnnotating charts\nAltair also allows you to annotate your charts with text, images, and emojis. You can do this by creating layered charts, which let you overlay two different charts on top of each other. The idea is to use the first chart to show the data, and the second chart to show the annotations. The second chart can then be overlaid on top of the first chart using the + operator to create a layered chart.\nLet\'s walk through an example of annotating a time-series chart with text and an emoji.\nStep 1: Create the base chart\nIn this example, we create a time-series chart to track the evolution of stock prices. The chart is interactive and contains a multi-line tooltip. Click here to learn more about multi-line tooltips in Altair.\nFirst, we import the required libraries and load the example stocks dataset using the vega_datasets package:\nimport altair as alt\nimport pandas as pd\nimport streamlit as st\nfrom vega_datasets import data\n\n# We use @st.cache_data to keep the dataset in cache\n@st.cache_data\ndef get_data():\n    source = data.stocks()\n    source = source[source.date.gt(""2004-01-01"")]\n    return source\n\nsource = get_data()\n\nNext, we define a function get_chart() to create the interactive time-series chart of the stock prices with a multi-line tooltip. The x-axis represents the date, and the y-axis represents the stock price.\nWe then invoke get_chart() that takes the stock prices dataframe as an input and returns a chart object. This is going to be our base chart on which we will overlay the annotations in Step 2.\n# Define the base time-series chart.\ndef get_chart(data):\n    hover = alt.selection_single(\n        fields=[""date""],\n        nearest=True,\n        on=""mouseover"",\n        empty=""none"",\n    )\n\n    lines = (\n        alt.Chart(data, title=""Evolution of stock prices"")\n        .mark_line()\n        .encode(\n      ']","Annotation text in charts provides additional context or information about specific data points or trends, enhancing the understanding of the data being visualized. It helps users interpret the chart more effectively by highlighting key points, events, or insights that may not be immediately apparent from the visual representation alone. This improves data visualization by making it more informative, engaging, and actionable for the audience.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}, {'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}]",True
"Which cloud platforms and services are used in Streamlit app deployment tutorials, aside from Docker and Kubernetes?","['Deployment tutorials - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsremoveDockerKubernetesschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Deploy/Other platformsDeployment tutorials\nThis sections contains step-by-step guides on how to deploy Streamlit apps to various cloud platforms and services. We have deployment guides for:\nStreamlit Community CloudDockerKubernetes\nWhile we work on official Streamlit deployment guides for other hosting providers, here are some user-submitted tutorials for different cloud services:\n\nHow to Deploy Streamlit to a Free Amazon EC2 instance, by Rahul Agarwal.\nHost Streamlit on Azure, by Richard Peterson.\nHow to deploy Streamlit apps to Google App Engine, by Yuichiro Tachibana (Tsuchiya).\nHost Streamlit on Heroku, by Maarten Grootendorst.\nDeploy Streamlit on Ploomber Cloud, by Ido Michael.\nHost Streamlit on 21YunBox, by Toby Lei.\nCommunity-supported deployment wiki.\nPrevious: Streamlit in SnowflakeNext: DockerforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","Amazon EC2, Azure, Google App Engine, Heroku, Ploomber Cloud, 21YunBox",conditional,"[{'source': 'https://docs.streamlit.io/deploy/tutorials', 'title': 'Deployment tutorials - Streamlit Docs'}]",True
How to add annotations with emojis or images to an Altair chart?,"['      x=""date"",\n            y=""price"",\n            color=""symbol"",\n        )\n    )\n\n    # Draw points on the line, and highlight based on selection\n    points = lines.transform_filter(hover).mark_circle(size=65)\n\n    # Draw a rule at the location of the selection\n    tooltips = (\n        alt.Chart(data)\n        .mark_rule()\n        .encode(\n            x=""yearmonthdate(date)"",\n            y=""price"",\n            opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),\n            tooltip=[\n                alt.Tooltip(""date"", title=""Date""),\n                alt.Tooltip(""price"", title=""Price (USD)""),\n            ],\n        )\n        .add_selection(hover)\n    )\n    return (lines + points + tooltips).interactive()\n\nchart = get_chart(source)\n\nStep 2: Annotate the chart\nNow that we have our first chart that shows the data, we can annotate it with text and an emoji. Let\'s overlay the ⬇ emoji on top of the time-series chart at specifc points of interest. We want users to hover over the ⬇ emoji to see the associated annotation text.\nFor simplicity, let\'s annotate four specific dates and set the height of the annotations at constant value of 10.\nstarTipYou can vary the horizontal and vertical postions of the annotations by replacing the hard-coded values with the output of Streamlit widgets! Click here to jump to a live example below, and develop an intuition for the ideal horizontal and vertical positions of the annotations by playing with Streamlit widgets.\nTo do so, we create a dataframe annotations_df containing the dates, annotation text, and the height of the annotations:\n# Add annotations\nANNOTATIONS = [\n    (""Mar 01, 2008"", ""Pretty good day for GOOG""),\n    (""Dec 01, 2007"", ""Something\'s going wrong for GOOG & AAPL""),\n    (""Nov 01, 2008"", ""Market starts again thanks to...""),\n    (""Dec 01, 2009"", ""Small crash for GOOG after...""),\n]\nannotations_df = pd.DataFrame(ANNOTATIONS, columns=[""date"", ""event""])\nannotations_df.date = pd.to_datetime(annotations_df.date)\nannotations_df[""y""] = 10\n\nUsing this dataframe, we create a scatter plot with the x-axis representing the date, and the y-axis representing the height of the annotation. The data point at the specific date and height is represented by the ⬇ emoji, using Altair\'s mark_text() mark.\nThe annotation text is displayed as a tooltip when users hover over the ⬇ emoji. This is achieved using Altair\'s encode() method to map the event column containing the annotation text to the visual attribute ⬇ of the plot.\nannotation_layer = (\n    alt.Chart(annotations_df)\n    .mark_text(size=20, text=""⬇"", dx=-8, dy=-10, align=""left"")\n    .encode(\n        x=""date:T"",\n        y=alt.Y(""y:Q""),\n        tooltip=[""event""],\n    )\n    .interactive()\n)\n\nFinally, we overlay the annotations on top of the base chart using the + operator to create the final layered chart! 🎈\nst.altair_chart(\n    (chart + annotation_layer).interactive(),\n    use_container_width=True\n)\n\n\nTo use images instead of emojis, replace the line containing .mark_text() with .mark_image(), and replace image_']","To add annotations with emojis or images to an Altair chart, you can create a dataframe containing the dates, annotation text, and the height of the annotations. Then, use Altair's mark_text() or mark_image() mark to represent the data points at specific dates and heights with emojis or images. Map the annotation text to the visual attribute of the plot using Altair's encode() method, and overlay the annotations on top of the base chart using the + operator to create the final layered chart.",conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}]",True
What weather data is shown in the Seattle Weather chart for 2012-2015 with temperatures from -5°C to 40°C?,"['            title=""Maximum Daily Temperature (C)"",\n            scale=alt.Scale(domain=[-5, 40]),\n        ),\n        color=alt.condition(brush, color, alt.value(""lightgray"")),\n        size=alt.Size(""precipitation:Q"", scale=alt.Scale(range=[5, 200])),\n    )\n    .properties(width=550, height=300)\n    .add_selection(brush)\n    .transform_filter(click)\n)\n\n# Bottom panel is a bar chart of weather type\nbars = (\n    alt.Chart()\n    .mark_bar()\n    .encode(\n        x=""count()"",\n        y=""weather:N"",\n        color=alt.condition(click, color, alt.value(""lightgray"")),\n    )\n    .transform_filter(brush)\n    .properties(\n        width=550,\n    )\n    .add_selection(click)\n)\n\nchart = alt.vconcat(points, bars, data=source, title=""Seattle Weather: 2012-2015"")\n\ntab1, tab2 = st.tabs([""Streamlit theme (default)"", ""Altair native theme""])\n\nwith tab1:\n    st.altair_chart(chart, theme=""streamlit"", use_container_width=True)\nwith tab2:\n    st.altair_chart(chart, theme=None, use_container_width=True)\n\nNotice how the custom colors are still reflected in the chart, even when the Streamlit theme is enabled 👇\nBuilt with Streamlit 🎈Fullscreen open_in_new\nFor many more examples of Altair charts with and without the Streamlit theme, check out the altair.streamlit.app.\nAnnotating charts\nAltair also allows you to annotate your charts with text, images, and emojis. You can do this by creating layered charts, which let you overlay two different charts on top of each other. The idea is to use the first chart to show the data, and the second chart to show the annotations. The second chart can then be overlaid on top of the first chart using the + operator to create a layered chart.\nLet\'s walk through an example of annotating a time-series chart with text and an emoji.\nStep 1: Create the base chart\nIn this example, we create a time-series chart to track the evolution of stock prices. The chart is interactive and contains a multi-line tooltip. Click here to learn more about multi-line tooltips in Altair.\nFirst, we import the required libraries and load the example stocks dataset using the vega_datasets package:\nimport altair as alt\nimport pandas as pd\nimport streamlit as st\nfrom vega_datasets import data\n\n# We use @st.cache_data to keep the dataset in cache\n@st.cache_data\ndef get_data():\n    source = data.stocks()\n    source = source[source.date.gt(""2004-01-01"")]\n    return source\n\nsource = get_data()\n\nNext, we define a function get_chart() to create the interactive time-series chart of the stock prices with a multi-line tooltip. The x-axis represents the date, and the y-axis represents the stock price.\nWe then invoke get_chart() that takes the stock prices dataframe as an input and returns a chart object. This is going to be our base chart on which we will overlay the annotations in Step 2.\n# Define the base time-series chart.\ndef get_chart(data):\n    hover = alt.selection_single(\n        fields=[""date""],\n        nearest=True,\n        on=""mouseover"",\n        empty=""none"",\n    )\n\n    lines = (\n        alt.Chart(data, title=""Evolution of stock prices"")\n        .mark_line()\n        .encode(\n      ']",Maximum Daily Temperature (C),conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}]",True
