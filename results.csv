question,contexts,ground_truth,evolution_type,metadata,episode_done,answer,answer_correctness,answer_relevancy
What is the function decorator used to cache functions that return data in Streamlit?,"['Caching and state - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateremovest.cache_datast.cache_resourcest.cachedeletest.session_statest.query_paramsst.experimental_get_query_paramsdeletest.experimental_set_query_paramsdeleteConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Caching and stateCaching and state\nOptimize performance and add statefulness to your app!\nCaching\nStreamlit provides powerful cache primitives for data and global resources. They allow your app to stay performant even when loading data from the web, manipulating large datasets, or performing expensive computations.\nCache dataFunction decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).@st.cache_data\ndef long_function(param1, param2):\n  # Perform expensive computation here or\n  # fetch data from the web here\n  return data\nCache resourceFunction decorator to cache functions that return global resources (e.g. database connections, ML models).@st.cache_resource\ndef init_model():\n  # Return a global resource here\n  return pipeline(\n    ""sentiment-analysis"",\n    model=""distilbert-base-uncased-finetuned-sst-2-english""\n  )\n\nManage state\nStreamlit re-executes your script with each user interaction. Widgets have built-in statefulness between reruns, but Session State lets you do more!\nSession StateSave data between reruns and across pages.st.session_state[""foo""] = ""bar""\nQuery parametersGet, set, or clear the query parameters that are shown in the browser\'s URL bar.st.query_params[key] = value\nst.query_params.clear()\n\nDeprecated commands\ndelete\nThis command was deprecated in version 1.18.0. Use st.cache_data or st.cache_resource instead.\nCachingFunction decorator to memoize function executions.@st.cache(ttl=3600)\ndef run_long_computation(arg1, arg2):\n  # Do stuff here\n  return computation_output\ndelete\nThis command was deprecated in version 1.18.0. Use st.cache_data instead.\nMemoExperimental function decorator to memoize function executions.@st.experimental_memo\ndef fetch_and_clean_data(url):\n  # Fetch data from URL here, and then clean it up.\n  return data\ndelete\nThis command was deprecated in version 1.18.0. Use st.cache_resource instead.\nSingletonExperimental function decorator to store singleton objects.@st.experimental_singleton\ndef get_database_session(url):\n  # Create a database session object that points to the URL.\n  return session\ndeleteGet query parametersGet query parameters that are shown in the browser\'s URL bar.param_dict = st.experimental_get_query_params()\ndeleteSet query parametersSet query parameters that are shown in the browser\'s URL bar.st.experimental_set_query_params(\n  {""show_all""=True, ""selected""=[""asia"", ""america""]}\n)\nPrevious: Execution flowNext: st.cache_dataforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']",@st.cache_data,simple,"[{'source': 'https://docs.streamlit.io/develop/api-reference/caching-and-state', 'title': 'Caching and state - Streamlit Docs'}]",True,"The function decorator used to cache functions that return data in Streamlit is @st.cache_data. By decorating a function with @st.cache_data, Streamlit will store the results of slow function calls, making the app faster by running the function only once. This decorator is designed for functions that return data like DataFrames, NumPy arrays, strings, integers, floats, or other serializable types.",0.4,0.9999999999998175
Which Streamlit component enables users to add tags and offers tag value suggestions?,"['message(""My message"")\nmessage(""Hello bot!"", is_user=True)  # align\'s the message to the right\nStreamlit Option MenuSelect a single item from a list of options in a menu. Created by @victoryhb.from streamlit_option_menu import option_menu\n\noption_menu(""Main Menu"", [""Home"", \'Settings\'],\n  icons=[\'house\', \'gear\'], menu_icon=""cast"", default_index=1)\nStreamlit ExtrasA library with useful Streamlit extras. Created by @arnaudmiribel.from streamlit_extras.stoggle import stoggle\n\nstoggle(\n    ""Click me!"", """"""🥷 Surprise! Here\'s some additional content"""""",)\nStreamlit ElementsCreate a draggable and resizable dashboard in Streamlit. Created by @okls.from streamlit_elements import elements, mui, html\n\nwith elements(""new_element""):\n  mui.Typography(""Hello world"")\nTagsAdd tags to your Streamlit apps. Created by @gagan3012.from streamlit_tags import st_tags\n\nst_tags(label=\'# Enter Keywords:\', text=\'Press enter to add more\', value=[\'Zero\', \'One\', \'Two\'],\nsuggestions=[\'five\', \'six\', \'seven\', \'eight\', \'nine\', \'three\', \'eleven\', \'ten\', \'four\'], maxtags = 4, key=\'1\')\nStqdmThe simplest way to handle a progress bar in streamlit app. Created by @Wirg.from stqdm import stqdm\n\nfor _ in stqdm(range(50)):\n    sleep(0.5)\nTimelineDisplay a Timeline in Streamlit apps using TimelineJS. Created by @innerdoc.from streamlit_timeline import timeline\n\nwith open(\'example.json\', ""r"") as f:\n  timeline(f.read(), height=800)\nCamera input liveAlternative for st.camera_input which returns the webcam images live. Created by @blackary.from camera_input_live import camera_input_live\n\nimage = camera_input_live()\nst.image(value)\nStreamlit AceAce editor component for Streamlit. Created by @okld.from streamlit_ace import st_ace\n\ncontent = st_ace()\ncontent\nStreamlit ChatStreamlit Component for a Chatbot UI. Created by @AI-Yash.from streamlit_chat import message\n\nmessage(""My message"")\nmessage(""Hello bot!"", is_user=True)  # align\'s the message to the right\nStreamlit Option MenuSelect a single item from a list of options in a menu. Created by @victoryhb.from streamlit_option_menu import option_menu\n\noption_menu(""Main Menu"", [""Home"", \'Settings\'],\n  icons=[\'house\', \'gear\'], menu_icon=""cast"", default_index=1)\nStreamlit ExtrasA library with useful Streamlit extras. Created by @arnaudmiribel.from streamlit_extras.stoggle import stoggle\n\nstoggle(\n    ""Click me!"", """"""🥷 Surprise! Here\'s some additional content"""""",)\nStreamlit ElementsCreate a draggable and resizable dashboard in Streamlit. Created by @okls.from streamlit_elements import elements, mui, html\n\nwith elements(""new_element""):\n  mui.Typography(""Hello world"")\nTagsAdd tags to your Streamlit apps. Created by @gagan3012.from streamlit_tags import st_tags\n\nst_tags(label=\'# Enter Keywords:\', text=\'Press enter to add more\', value=[\'Zero\', \'One\', \'Two\'],\nsuggestions=[\'five\', \'six\', \'seven\', \'eight\', \'nine\', \'three\', \'eleven\', \'ten\', \'four\'], maxtags = 4, key=\'1\')\nStqdmThe simplest way to handle a progress bar in streamlit app. Created by @Wirg.from stqdm import stqdm\n\nfor _ in stqdm(range(50)):\n    sleep(0.5)\nTimelineDisplay a Timeline in Streamlit apps using TimelineJS. Created by @innerdoc.from streamlit_timeline import timeline\n\nwith open(\'example.json\', ""r"") as f:\n  timeline(f.read(), height=800)\nCamera input liveAlternative for st.camera_input which returns the webcam images live. Created by @blackary.from camera_input_live import camera_input_live\n\n']",TagsAdd tags to your Streamlit apps. Created by @gagan3012.from streamlit_tags import st_tags,reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/widgets', 'title': 'Input widgets - Streamlit Docs'}]",True,"The component that enables users to add tags and offers tag value suggestions in Streamlit is the ""Tags"" component, created by @gagan3012. It allows users to enter keywords and provides suggestions for tags. Users can press enter to add more tags, with a maximum limit specified.",0.36363636363636365,0.8976422332047508
Which Streamlit component integrates Lottie animations in apps?,"['data = [{\'dropout\':0.1, \'lr\': 0.001, \'loss\': 10.0, \'optimizer\': \'SGD\'}, {\'dropout\':0.15, \'lr\': 0.01, \'loss\': 3.5, \'optimizer\': \'Adam\'}, {\'dropout\':0.3, \'lr\': 0.1, \'loss\': 4.5, \'optimizer\': \'Adam\'}]\nhip.Experiment.from_iterable(data).display()\nEChartsHigh dimensional Interactive Plotting. Created by @andfanilo.from streamlit_echarts import st_echarts\nst_echarts(options=options)\nStreamlit FoliumStreamlit Component for rendering Folium maps. Created by @randyzwitch.m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nst_data = st_folium(m, width=725)\nSpacy-StreamlitspaCy building blocks and visualizers for Streamlit apps. Created by @explosion.models = [""en_core_web_sm"", ""en_core_web_md""]\nspacy_streamlit.visualize(models, ""Sundar Pichai is the CEO of Google."")\nStreamlit AgraphA Streamlit Graph Vis, based on react-grah-vis. Created by @ChrisDelClea.from streamlit_agraph import agraph, Node, Edge, Config\nagraph(nodes=nodes, edges=edges, config=config)\nStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.lottie_hello = load_lottieurl(""https://assets5.lottiefiles.com/packages/lf20_V9t630.json"")\nst_lottie(lottie_hello, key=""hello"")\nPlotly EventsMake Plotly charts interactive!. Created by @null-jones.fig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\nStreamlit ExtrasA library with useful Streamlit extras. Created by @arnaudmiribel.chart += get_annotations_chart(annotations=[(""Mar 01, 2008"", ""Pretty good day for GOOG""), (""Dec 01, 2007"", ""Something\'s going wrong for GOOG & AAPL""), (""Nov 01, 2008"", ""Market starts again thanks to...""), (""Dec 01, 2009"", ""Small crash for GOOG after...""),],)\nst.altair_chart(chart, use_container_width=True)\nPlostA deceptively simple plotting library for Streamlit. Created by @tvst.import plost\nplost.line_chart(my_dataframe, x=\'time\', y=\'stock_value\', color=\'stock_name\',)\nHiPlotHigh dimensional Interactive Plotting. Created by @facebookresearch.data = [{\'dropout\':0.1, \'lr\': 0.001, \'loss\': 10.0, \'optimizer\': \'SGD\'}, {\'dropout\':0.15, \'lr\': 0.01, \'loss\': 3.5, \'optimizer\': \'Adam\'}, {\'dropout\':0.3, \'lr\': 0.1, \'loss\': 4.5, \'optimizer\': \'Adam\'}]\nhip.Experiment.from_iterable(data).display()\nEChartsHigh dimensional Interactive Plotting. Created by @andfanilo.from streamlit_echarts import st_echarts\nst_echarts(options=options)\nStreamlit FoliumStreamlit Component for rendering Folium maps. Created by @randyzwitch.m = folium.Map(location=[39.949610, -75.150282], zoom_start=16)\nst_data = st_folium(m, width=725)\nSpacy-StreamlitspaCy building blocks and visualizers for Streamlit apps. Created by @explosion.models = [""en_core_web_sm"", ""en_core_web_md""]\nspacy_streamlit.visualize(models, ""Sundar Pichai is the CEO of Google."")\nStreamlit AgraphA Streamlit Graph Vis, based on react-grah-vis. Created by @ChrisDelClea.from streamlit_agraph import agraph, Node, Edge, Config\nagraph(nodes=nodes, edges=edges, config=config)\nStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.l']",Streamlit Lottie,reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts', 'title': 'Chart elements - Streamlit Docs'}]",True,"The Streamlit component that integrates Lottie animations in apps is called ""Streamlit Lottie."" You can use it to load and display Lottie animations within your Streamlit app. It is a third-party component created by @andfanilo.",0.0,0.9897093475199249
"How can the Column configuration API optimize display and editing in Streamlit for dataframes and data editors, with the ability to select multiple columns and ranges?","['. To select multiple columns, hold Ctrl while\nselecting columns. Hold Shift to select a range of columns.\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\nif ""df"" not in st.session_state:\n    st.session_state.df = pd.DataFrame(\n        np.random.randn(12, 5), columns=[""a"", ""b"", ""c"", ""d"", ""e""]\n    )\n\nevent = st.dataframe(\n    st.session_state.df,\n    key=""data"",\n    on_select=""rerun"",\n    selection_mode=[""multi-row"", ""multi-column""],\n)\n\nevent.selection\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\nelement.add_rowsStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeConcatenate a dataframe to the bottom of the current one.\nFunction signature[source] element.add_rows(data=None, **kwargs) Parameters\n\ndata\n(pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, Iterable, dict, or None)\n\n \nTable to concat. Optional.\n\n\n**kwargs\n(pandas.DataFrame, numpy.ndarray, Iterable, dict, or None)\n\n \nThe named dataset to concat. Optional. You can only pass in 1\ndataset (including the one in the data parameter).\nExample\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table = st.table(df1)\n\ndf2 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table.add_rows(df2)\n# Now the table shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nYou can do the same thing with plots. For example, if you want to add\nmore data to a line chart:\n\n# Assuming df1 and df2 from the example above still exist...\nmy_chart = st.line_chart(df1)\nmy_chart.add_rows(df2)\n# Now the chart shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nAnd for plots whose datasets are named, you can pass the data with a\nkeyword argument where the key is the name:\n\nmy_chart = st.vega_lite_chart({\n    \'mark\': \'line\',\n    \'encoding\': {\'x\': \'a\', \'y\': \'b\'},\n    \'datasets\': {\n      \'some_fancy_name\': df1,  # <-- named dataset\n     },\n    \'data\': {\'name\': \'some_fancy_name\'},\n}),\nmy_chart.add_rows(some_fancy_name=df2)  # <-- name used as keyword\n\n\n\nInteractivity\nDataframes displayed with st.dataframe are interactive. End users can sort, resize, search, and copy data to their clipboard. For on overview of features, read our Dataframes guide.\nConfiguring columns\nYou can configure the display and editing behavior of columns in st.dataframe and st.data_editor via the Column configuration API. We have developed the API to let you add images, charts, and clickable URLs in dataframe and data editor']","The Column configuration API can optimize display and editing in Streamlit for dataframes and data editors by allowing users to add images, charts, and clickable URLs. This API also enables the selection of multiple columns and ranges, enhancing the interactive capabilities of the data visualization.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/data/st.dataframe', 'title': 'st.dataframe - Streamlit Docs'}]",True,"The st.column_config class in Streamlit allows for configuring data display and interaction within dataframes and data editors. It provides methods to customize columns for different data types, enhancing the viewing experience and offering tools for clearer data visualization. By utilizing features like column configuration, users can select multiple columns and ranges, optimize display, and streamline editing processes in Streamlit.",0.3333333333333333,0.8658773054342959
How can you display data as a table and graph interactively?,"['st.dataframe - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsremovest.dataframest.data_editorst.column_configaddst.tablest.metricst.jsonChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Data elements/st.dataframestarTipThis page only contains information on the st.dataframe API. For an overview of working with dataframes read Dataframes. If you want to let users interactively edit dataframes, check out st.data_editor.\nst.dataframeStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay a dataframe as an interactive table.\nThis command works with dataframes from Pandas, PyArrow, Snowpark, and PySpark.\nIt can also display several other types that can be converted to dataframes,\ne.g. numpy arrays, lists, sets and dictionaries.\nFunction signature[source] st.dataframe(data=None, width=None, height=None, *, use_container_width=False, hide_index=None, column_order=None, column_config=None, key=None, on_select=""ignore"", selection_mode=""multi-row"") Parameters\n\ndata\n(pandas.DataFrame, pandas.Series, pandas.Styler, pandas.Index,             pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame,             snowflake.snowpark.table.Table, Iterable, dict, or None)\n\n \nThe data to display.\nIf data is a pandas.Styler, it will be used to style its\nunderlying pandas.DataFrame. Streamlit supports custom cell\nvalues and colors. It does not support some of the more exotic\npandas styling features, like bar charts, hovering, and captions.\n\n\nwidth\n(int or None)\n\n \nDesired width of the dataframe expressed in pixels. If width is\nNone (default), Streamlit sets the dataframe width to fit its\ncontents up to the width of the parent container. If width is\ngreater than the width of the parent container, Streamlit sets the\ndataframe width to match the width of the parent container.\n\n\nheight\n(int or None)\n\n \nDesired height of the dataframe expressed in pixels. If height\nis None (default), Streamlit sets the height to show at most\nten rows. Vertical scrolling within the dataframe element is\nenabled when the height does not accomodate all rows.\n\n\nuse_container_width\n(bool)\n\n \nWhether to override width with the width of the parent\ncontainer. If use_container_width is False (default),\nStreamlit sets the dataframe\'s width according to width. If\nuse_container_width is True, Streamlit sets the width of\nthe dataframe to match the width of the parent container.\n\n\nhide_index\n(bool or None)\n\n \nWhether to hide the index column(s). If hide_index is None\n(default), the visibility of index columns is automatically\ndetermined based on the data.\n\n\ncolumn_order\n(Iterable of str or None)\n\n \nThe ordered list of columns to display. If column_order is\nNone ('
 ""st.graphviz_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.graphviz_chartst.graphviz_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay a graph using the dagre-d3 library.\nFunction signature[source] st.graphviz_chart(figure_or_dot, use_container_width=False) Parameters\n\nfigure_or_dot\n(graphviz.dot.Graph, graphviz.dot.Digraph, str)\n\n \nThe Graphlib graph object or dot string to display\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure's native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\nExample\n\nimport streamlit as st\nimport graphviz\n\n# Create a graphlib graph object\ngraph = graphviz.Digraph()\ngraph.edge('run', 'intr')\ngraph.edge('intr', 'runbl')\ngraph.edge('runbl', 'run')\ngraph.edge('run', 'kernel')\ngraph.edge('kernel', 'zombie')\ngraph.edge('kernel', 'sleep')\ngraph.edge('kernel', 'runmem')\ngraph.edge('sleep', 'swap')\ngraph.edge('swap', 'runswap')\ngraph.edge('runswap', 'new')\ngraph.edge('runswap', 'runmem')\ngraph.edge('new', 'runmem')\ngraph.edge('sleep', 'runmem')\n\nst.graphviz_chart(graph)\n\nOr you can render the chart from the graph using GraphViz's Dot\nlanguage:\n\nst.graphviz_chart('''\n    digraph {\n        run -> intr\n        intr -> runbl\n        runbl -> run\n        run -> kernel\n        kernel -> zombie\n        kernel -> sleep\n        kernel -> runmem\n        sleep -> swap\n        swap -> runswap\n        runswap -> new\n        runswap -> runmem\n        new -> runmem\n        sleep -> runmem\n    }\n''')\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\nPrevious: st.bokeh_chartNext: st.plotly_chartforumStill have""]","To display data as a table interactively, you can use the st.dataframe function in Streamlit. This function allows you to show dataframes from various sources like Pandas, PyArrow, Snowpark, and PySpark. It can also display other types that can be converted to dataframes, such as numpy arrays, lists, sets, and dictionaries. Additionally, to display a graph interactively, you can use the st.graphviz_chart function in Streamlit. This function allows you to create and display graphs using the dagre-d3 library.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/data/st.dataframe', 'title': 'st.dataframe - Streamlit Docs'}
 {'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.graphviz_chart', 'title': 'st.graphviz_chart - Streamlit Docs'}]",True,"You can display data interactively as a table and graph using Streamlit in Python. Streamlit supports various charting libraries such as Matplotlib, Vega Lite, and deck.gl for creating interactive graphs. Additionally, Streamlit provides native chart types like st.line_chart and st.area_chart for displaying data visually in a table or graph format.",0.0,0.8165842338647149
"Which charting library does Streamlit support for figures, and which library enables graph display with dagre-d3?","['Chart elements - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elementsChart elements\nStreamlit supports several different charting libraries, and our goal is to\ncontinually add support for more. Right now, the most basic library in our\narsenal is Matplotlib. Then there are also\ninteractive charting libraries like Vega\nLite (2D charts) and\ndeck.gl (maps and 3D charts). And\nfinally we also provide a few chart types that are ""native"" to Streamlit,\nlike st.line_chart and st.area_chart.\nSimple chart elements\nSimple area chartsDisplay an area chart.st.area_chart(my_data_frame)\nSimple bar chartsDisplay a bar chart.st.bar_chart(my_data_frame)\nSimple line chartsDisplay a line chart.st.line_chart(my_data_frame)\nSimple scatter chartsDisplay a line chart.st.scatter_chart(my_data_frame)\nScatterplots on mapsDisplay a map with points on it.st.map(my_data_frame)\n\nAdvanced chart elements\nMatplotlibDisplay a matplotlib.pyplot figure.st.pyplot(my_mpl_figure)\nAltairDisplay a chart using the Altair library.st.altair_chart(my_altair_chart)\nVega-LiteDisplay a chart using the Vega-Lite library.st.vega_lite_chart(my_vega_lite_chart)\nPlotlyDisplay an interactive Plotly chart.st.plotly_chart(my_plotly_chart)\nBokehDisplay an interactive Bokeh chart.st.bokeh_chart(my_bokeh_chart)\nPyDeckDisplay a chart using the PyDeck library.st.pydeck_chart(my_pydeck_chart)\nGraphVizDisplay a graph using the dagre-d3 library.st.graphviz_chart(my_graphviz_spec)\n\nThird-party componentsThese are featured components created by our lovely community. If you don\'t see what you\'re looking for, check out our Components Hub app and Streamlit Extras for more examples and inspiration! PreviousStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.lottie_hello = load_lottieurl(""https://assets5.lottiefiles.com/packages/lf20_V9t630.json"")\nst_lottie(lottie_hello, key=""hello"")\nPlotly EventsMake Plotly charts interactive!. Created by @null-jones.fig = px.line(x=[1], y=[1])\nselected_points = plotly_events(fig)\nStreamlit ExtrasA library with useful Streamlit extras. Created by @arnaudmiribel.chart += get_annotations_chart(annotations=[(""Mar 01, 2008"", ""Pretty good day for GOOG""), (""Dec 01, 2007"", ""Something\'s going wrong for GOOG & AAPL""), (""Nov 01, 2008"", ""Market starts again thanks to...""), (""Dec 01, 2009"", ""Small crash for GOOG after...""),],)\nst.altair_chart(chart, use_container_width=True)\nPlostA deceptively simple plotting library for Streamlit. Created by @tvst.import plost\nplost.line_chart(my_dataframe, x=\'time\', y=\'stock_value\', color=\'stock_name\',)\nHiPlotHigh dimensional Interactive Plotting. Created by @facebookresearch.'
 ""st.graphviz_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.graphviz_chartst.graphviz_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay a graph using the dagre-d3 library.\nFunction signature[source] st.graphviz_chart(figure_or_dot, use_container_width=False) Parameters\n\nfigure_or_dot\n(graphviz.dot.Graph, graphviz.dot.Digraph, str)\n\n \nThe Graphlib graph object or dot string to display\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure's native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\nExample\n\nimport streamlit as st\nimport graphviz\n\n# Create a graphlib graph object\ngraph = graphviz.Digraph()\ngraph.edge('run', 'intr')\ngraph.edge('intr', 'runbl')\ngraph.edge('runbl', 'run')\ngraph.edge('run', 'kernel')\ngraph.edge('kernel', 'zombie')\ngraph.edge('kernel', 'sleep')\ngraph.edge('kernel', 'runmem')\ngraph.edge('sleep', 'swap')\ngraph.edge('swap', 'runswap')\ngraph.edge('runswap', 'new')\ngraph.edge('runswap', 'runmem')\ngraph.edge('new', 'runmem')\ngraph.edge('sleep', 'runmem')\n\nst.graphviz_chart(graph)\n\nOr you can render the chart from the graph using GraphViz's Dot\nlanguage:\n\nst.graphviz_chart('''\n    digraph {\n        run -> intr\n        intr -> runbl\n        runbl -> run\n        run -> kernel\n        kernel -> zombie\n        kernel -> sleep\n        kernel -> runmem\n        sleep -> swap\n        swap -> runswap\n        runswap -> new\n        runswap -> runmem\n        new -> runmem\n        sleep -> runmem\n    }\n''')\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\nPrevious: st.bokeh_chartNext: st.plotly_chartforumStill have""]","Streamlit supports several different charting libraries, with the most basic being Matplotlib. Additionally, Streamlit enables graph display with dagre-d3 library.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts', 'title': 'Chart elements - Streamlit Docs'}
 {'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.graphviz_chart', 'title': 'st.graphviz_chart - Streamlit Docs'}]",True,"Streamlit supports Matplotlib as the most basic charting library. Additionally, Streamlit also supports interactive charting libraries like Vega Lite and deck.gl for different chart types. Streamlit provides its own chart types such as st.line_chart and st.area_chart as well. Unfortunately, there is no mention of dagre-d3 specifically in the provided context.",0.75,0.9161789972744714
How can you add rows to a table or more data to a plot in a Streamlit app?,"[', **kwargs) Parameters\n\ndata\n(pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, Iterable, dict, or None)\n\n \nTable to concat. Optional.\n\n\n**kwargs\n(pandas.DataFrame, numpy.ndarray, Iterable, dict, or None)\n\n \nThe named dataset to concat. Optional. You can only pass in 1\ndataset (including the one in the data parameter).\nExample\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table = st.table(df1)\n\ndf2 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table.add_rows(df2)\n# Now the table shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nYou can do the same thing with plots. For example, if you want to add\nmore data to a line chart:\n\n# Assuming df1 and df2 from the example above still exist...\nmy_chart = st.line_chart(df1)\nmy_chart.add_rows(df2)\n# Now the chart shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nAnd for plots whose datasets are named, you can pass the data with a\nkeyword argument where the key is the name:\n\nmy_chart = st.vega_lite_chart({\n    \'mark\': \'line\',\n    \'encoding\': {\'x\': \'a\', \'y\': \'b\'},\n    \'datasets\': {\n      \'some_fancy_name\': df1,  # <-- named dataset\n     },\n    \'data\': {\'name\': \'some_fancy_name\'},\n}),\nmy_chart.add_rows(some_fancy_name=df2)  # <-- name used as keyword\n\n\nPrevious: st.area_chartNext: st.line_chartforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","You can add rows to a table or more data to a plot in a Streamlit app by using the 'add_rows' method. For tables, you can pass the additional data as a parameter to the 'add_rows' method. For plots, you can add more data by passing the data as a parameter to the 'add_rows' method.",simple,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.bar_chart', 'title': 'st.bar_chart - Streamlit Docs'}]",True,"To add rows to a table or more data to a plot in a Streamlit app, you can use the `add_rows` method. For a table, you can create the initial table using `st.table` and then add rows using `my_table.add_rows(df2)`. Similarly, for a plot like a line chart, you can add more data using `my_chart.add_rows(df2)` after creating the initial chart with `st.line_chart(df1)`.",0.7142857142857143,0.9999999999997694
How to improve user experience in Streamlit by delaying script rerun until related widgets are filled?,"['Execution flow - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowremovest.dialogst.formst.form_submit_buttonst.fragmentst.rerunst.stopCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Execution flowExecution flow\nChange execution\nBy default, Streamlit apps execute the script entirely, but we allow some functionality to handle control flow in your applications.\nModal dialogsInsert a modal dialog that can rerun independently from the rest of the script.@st.experimental_dialog(""Sign up"")\ndef email_form():\n    name = st.text_input(""Name"")\n    email = st.text_input(""Email"")\nPartial rerunsDefine a fragment to rerun independently from the rest of the script.@st.experimental_fragment(run_every=""10s"")\ndef fragment():\n    df = get_data()\n    st.line_chart(df)\nRerun scriptRerun the script immediately.st.rerun()\nStop executionStops execution immediately.st.stop()\n\nGroup multiple widgets\nBy default, Streamlit reruns your script everytime a user interacts with your app.\nHowever, sometimes it\'s a better user experience to wait until a group of related\nwidgets is filled before actually rerunning the script. That\'s what st.form is for!\nFormsCreate a form that batches elements together with a “Submit"" button.with st.form(key=\'my_form\'):\n    name = st.text_input(""Name"")\n    email = st.text_input(""Email"")\n    st.form_submit_button(""Sign up"")\nForm submit buttonDisplay a form submit button.with st.form(key=\'my_form\'):\n    name = st.text_input(""Name"")\n    email = st.text_input(""Email"")\n    st.form_submit_button(""Sign up"")\n\nThird-party componentsThese are featured components created by our lovely community. If you don\'t see what you\'re looking for, check out our Components Hub app and Streamlit Extras for more examples and inspiration!AutorefreshForce a refresh without tying up a script. Created by @kmcgrady.from streamlit_autorefresh import st_autorefresh\n\nst_autorefresh(interval=2000, limit=100,\n  key=""fizzbuzzcounter"")\nPydanticAuto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by @lukasmasuch.import streamlit_pydantic as sp\n\nsp.pydantic_form(key=""my_form"",\n  model=ExampleModel)\nStreamlit PagesAn experimental version of Streamlit Multi-Page Apps. Created by @blackary.from st_pages import Page, show_pages, add_page_title\n\nshow_pages([ Page(""streamlit_app.py"", ""Home"", ""🏠""),\n  Page(""other_pages/page2.py"", ""Page 2"", "":books:""), ])\nPrevious: Navigation and pagesNext: st.dialogforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","By default, Streamlit reruns your script everytime a user interacts with your app. However, sometimes it's a better user experience to wait until a group of related widgets is filled before actually rerunning the script. That's what st.form is for!",reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/execution-flow', 'title': 'Execution flow - Streamlit Docs'}]",True,"I don't know the specifics of delaying script rerun in Streamlit until related widgets are filled. However, Streamlit introduced fragments in version 1.33.0, which allow rerunning a portion of your code instead of the full script. By leveraging fragments, you may be able to control the execution flow more precisely and potentially achieve the behavior you are looking for in improving user experience. It's worth exploring how fragments can be utilized in your Streamlit app to optimize the user interaction process.",0.18181818181818182,0.0
How can images be added to Streamlit apps with page navigation?,"['Media elements - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsremovest.audiost.imagest.logost.videoLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Media elementsMedia elements\nIt\'s easy to embed images, videos, and audio files directly into your Streamlit apps.\nImageDisplay an image or list of images.st.image(numpy_array)\nst.image(image_bytes)\nst.image(file)\nst.image(""https://example.com/myimage.jpg"")\nLogoDisplay a logo in the upper-left corner of your app and its sidebar.st.logo(""logo.jpg"")\nAudioDisplay an audio player.st.audio(numpy_array)\nst.audio(audio_bytes)\nst.audio(file)\nst.audio(""https://example.com/myaudio.mp3"", format=""audio/mp3"")\nVideoDisplay a video player.st.video(numpy_array)\nst.video(video_bytes)\nst.video(file)\nst.video(""https://example.com/myvideo.mp4"", format=""video/mp4"")\n\nThird-party componentsThese are featured components created by our lovely community. If you don\'t see what you\'re looking for, check out our Components Hub app and Streamlit Extras for more examples and inspiration! PreviousStreamlit CropperA simple image cropper for Streamlit. Created by @turner-anderson.from streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\nImage CoordinatesGet the coordinates of clicks on an image. Created by @blackary.from streamlit_image_coordinates import streamlit_image_coordinates\n\nstreamlit_image_coordinates(""https://placekitten.com/200/300"")\nStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.lottie_hello = load_lottieurl(""https://assets5.lottiefiles.com/packages/lf20_V9t630.json"")\n\nst_lottie(lottie_hello, key=""hello"")\nStreamlit WebrtcHandling and transmitting real-time video/audio streams with Streamlit. Created by @whitphx.from streamlit_webrtc import webrtc_streamer\n\nwebrtc_streamer(key=""sample"")\nDrawable CanvasProvides a sketching canvas using Fabric.js. Created by @andfanilo.from streamlit_drawable_canvas import st_canvas\n\nst_canvas(fill_color=""rgba(255, 165, 0, 0.3)"", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == \'point\' else 0, key=""canvas"",)\nImage ComparisonCompare images with a slider using JuxtaposeJS. Created by @fcakyon.from streamlit_image_comparison import image_comparison\n\nimage_comparison(img1=""image1.jpg"", img2=""image2.jpg"",)\nStreamlit CropperA simple image cropper for Streamlit. Created by @turner-anderson.from streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\nImage CoordinatesGet the coordinates of clicks on an image. Created by @blackary.from streamlit_image_coordinates import']","Images can be added to Streamlit apps using the st.image() function with parameters like numpy arrays, image bytes, or image files. Additionally, images can be displayed from URLs using st.image('https://example.com/myimage.jpg').",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/media', 'title': 'Media elements - Streamlit Docs'}]",True,"In Streamlit, you can add images to your app using st.image(). To enable page navigation, you can use st.page_link to link to other pages within your app or external sites. By combining st.page_link with client.showSidebarNavigation, you can create dynamic navigation menus in your Streamlit app.",0.5,0.9364887849836797
"What is the role of the key parameter in st.plotly_chart in Streamlit, and how does it differ from st.bokeh_chart?","['st.plotly_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.plotly_chartst.plotly_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay an interactive Plotly chart.\nPlotly is a charting library for Python.\nThe arguments to this function closely follow the ones for Plotly\'s\nplot() function.\nTo show Plotly charts in Streamlit, call st.plotly_chart wherever\nyou would call Plotly\'s py.plot or py.iplot.\nFunction signature[source] st.plotly_chart(figure_or_data, use_container_width=False, *, theme=""streamlit"", key=None, on_select=""ignore"", selection_mode=(\'points\', \'box\', \'lasso\'), **kwargs) Parameters\n\nfigure_or_data\n(plotly.graph_objs.Figure, plotly.graph_objs.Data,            or dict/list of plotly.graph_objs.Figure/Data)\n\n \nThe Plotly Figure or Data object to render. See\nhttps://plot.ly/python/ for examples of graph descriptions.\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure\'s native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\n\n\ntheme\n(""streamlit"" or None)\n\n \nThe theme of the chart. If theme is ""streamlit"" (default),\nStreamlit uses its own design default. If theme is None,\nStreamlit falls back to the default behavior of the library.\n\n\nkey\n(str)\n\n \nAn optional string to use for giving this element a stable\nidentity. If key is None (default), this element\'s identity\nwill be determined based on the values of the other parameters.\nAdditionally, if selections are activated and key is provided,\nStreamlit will register the key in Session State to store the\nselection state. The selection state is read-only.\n\n\non_select\n(""ignore"" or ""rerun"" or callable)\n\n \nHow the figure should respond to user selection events. This\ncontrols whether or not the figure behaves like an input widget.\non_select can be one of the following:\n\n""ignore"" (default): Streamlit will not react to any selection\nevents in the chart. The figure will not behave like an input\nwidget.\n""rerun"": Streamlit will rerun the app when the user selects\ndata in the chart. In this case, st.plotly_chart will return\nthe selection data as a dictionary.\nA callable: Streamlit will rerun the app and execute the\ncallable as a callback']","The key parameter in st.plotly_chart is an optional string used to give the element a stable identity. If provided, Streamlit will register the key in Session State to store the selection state. This key parameter differs from st.bokeh_chart in that it allows for storing selection state, while st.bokeh_chart does not have this functionality.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.plotly_chart', 'title': 'st.plotly_chart - Streamlit Docs'}]",True,"The `key` parameter in `st.plotly_chart` in Streamlit is used for tracking elements and updating them. It allows for efficient re-rendering of components based on changes to the key value. On the other hand, `st.bokeh_chart` does not have a similar key parameter for tracking and updating elements in the same way.",0.75,0.9608222077173744
How to concatenate tables in Streamlit with `add_rows` and one dataset limit?,"[', **kwargs) Parameters\n\ndata\n(pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, Iterable, dict, or None)\n\n \nTable to concat. Optional.\n\n\n**kwargs\n(pandas.DataFrame, numpy.ndarray, Iterable, dict, or None)\n\n \nThe named dataset to concat. Optional. You can only pass in 1\ndataset (including the one in the data parameter).\nExample\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table = st.table(df1)\n\ndf2 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table.add_rows(df2)\n# Now the table shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nYou can do the same thing with plots. For example, if you want to add\nmore data to a line chart:\n\n# Assuming df1 and df2 from the example above still exist...\nmy_chart = st.line_chart(df1)\nmy_chart.add_rows(df2)\n# Now the chart shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nAnd for plots whose datasets are named, you can pass the data with a\nkeyword argument where the key is the name:\n\nmy_chart = st.vega_lite_chart({\n    \'mark\': \'line\',\n    \'encoding\': {\'x\': \'a\', \'y\': \'b\'},\n    \'datasets\': {\n      \'some_fancy_name\': df1,  # <-- named dataset\n     },\n    \'data\': {\'name\': \'some_fancy_name\'},\n}),\nmy_chart.add_rows(some_fancy_name=df2)  # <-- name used as keyword\n\n\nPrevious: st.area_chartNext: st.line_chartforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","You can concatenate tables in Streamlit with `add_rows` by passing one dataset at a time. This function allows you to add rows from another dataset to the existing table or chart, maintaining a single dataset limit.",conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.bar_chart', 'title': 'st.bar_chart - Streamlit Docs'}]",True,"To concatenate tables in Streamlit using `add_rows` and stay within the one dataset limit, you can create an initial table using `st.table()` with your first dataset, then use `add_rows()` to add subsequent datasets like so:

```python
import streamlit as st
import pandas as pd
import numpy as np

df1 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))
my_table = st.table(df1)

df2 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))
my_table.add_rows(df2)
```

This allows you to display multiple datasets within the same table in your Streamlit app, maintaining the one dataset limit per `add_rows()` call.",0.4,0.9936261114745255
How to add more data to a line chart in Streamlit with only one dataset limit?,"[', **kwargs) Parameters\n\ndata\n(pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, Iterable, dict, or None)\n\n \nTable to concat. Optional.\n\n\n**kwargs\n(pandas.DataFrame, numpy.ndarray, Iterable, dict, or None)\n\n \nThe named dataset to concat. Optional. You can only pass in 1\ndataset (including the one in the data parameter).\nExample\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndf1 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table = st.table(df1)\n\ndf2 = pd.DataFrame(np.random.randn(50, 20), columns=(""col %d"" % i for i in range(20)))\n\nmy_table.add_rows(df2)\n# Now the table shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nYou can do the same thing with plots. For example, if you want to add\nmore data to a line chart:\n\n# Assuming df1 and df2 from the example above still exist...\nmy_chart = st.line_chart(df1)\nmy_chart.add_rows(df2)\n# Now the chart shown in the Streamlit app contains the data for\n# df1 followed by the data for df2.\n\nAnd for plots whose datasets are named, you can pass the data with a\nkeyword argument where the key is the name:\n\nmy_chart = st.vega_lite_chart({\n    \'mark\': \'line\',\n    \'encoding\': {\'x\': \'a\', \'y\': \'b\'},\n    \'datasets\': {\n      \'some_fancy_name\': df1,  # <-- named dataset\n     },\n    \'data\': {\'name\': \'some_fancy_name\'},\n}),\nmy_chart.add_rows(some_fancy_name=df2)  # <-- name used as keyword\n\n\nPrevious: st.area_chartNext: st.line_chartforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']",You can add more data to a line chart in Streamlit with only one dataset limit by using the add_rows method. This method allows you to concatenate additional data to the existing dataset in the line chart.,conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.bar_chart', 'title': 'st.bar_chart - Streamlit Docs'}]",True,I'm not sure about adding more data to a line chart in Streamlit with a one dataset limit. You may want to refer to the Streamlit documentation or community forums for specific guidance on this.,0.6666666666666666,0.0
How can Lottie animations be used in a Streamlit app with image coordinates?,"[' streamlit_image_coordinates\n\nstreamlit_image_coordinates(""https://placekitten.com/200/300"")\nStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.lottie_hello = load_lottieurl(""https://assets5.lottiefiles.com/packages/lf20_V9t630.json"")\n\nst_lottie(lottie_hello, key=""hello"")\nStreamlit WebrtcHandling and transmitting real-time video/audio streams with Streamlit. Created by @whitphx.from streamlit_webrtc import webrtc_streamer\n\nwebrtc_streamer(key=""sample"")\nDrawable CanvasProvides a sketching canvas using Fabric.js. Created by @andfanilo.from streamlit_drawable_canvas import st_canvas\n\nst_canvas(fill_color=""rgba(255, 165, 0, 0.3)"", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == \'point\' else 0, key=""canvas"",)\nImage ComparisonCompare images with a slider using JuxtaposeJS. Created by @fcakyon.from streamlit_image_comparison import image_comparison\n\nimage_comparison(img1=""image1.jpg"", img2=""image2.jpg"",)\nStreamlit CropperA simple image cropper for Streamlit. Created by @turner-anderson.from streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\nImage CoordinatesGet the coordinates of clicks on an image. Created by @blackary.from streamlit_image_coordinates import streamlit_image_coordinates\n\nstreamlit_image_coordinates(""https://placekitten.com/200/300"")\nStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.lottie_hello = load_lottieurl(""https://assets5.lottiefiles.com/packages/lf20_V9t630.json"")\n\nst_lottie(lottie_hello, key=""hello"")\n NextPrevious: Input widgetsNext: st.audioforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']",Lottie animations can be integrated into a Streamlit app by using the load_lottieurl function to load the animation URL and then displaying it using the st_lottie function with a specified key.,conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference/media', 'title': 'Media elements - Streamlit Docs'}]",True,"You can integrate Lottie animations in a Streamlit app by loading the animation URL with `load_lottieurl` and displaying it using `st_lottie`. To use image coordinates in Streamlit, you can get the coordinates of clicks on an image by using the `streamlit_image_coordinates` function. Additionally, for image manipulation tasks like cropping, you can use the `st_cropper` function from Streamlit Cropper.",0.4444444444444444,0.964180181445551
How can custom color scales be defined and reflected in Plotly charts when using Streamlit with the default theme enabled or disabled?,"[' Streamlit theme enabled and disabled.\nBuilt with Streamlit 🎈Fullscreen open_in_new\nIf you\'re wondering if your own customizations will still be taken into account, don\'t worry! You can still make changes to your chart configurations. In other words, although we now enable the Streamlit theme by default, you can overwrite it with custom colors or fonts. For example, if you want a chart line to be green instead of the default red, you can do it!\nHere\'s an example of an Plotly chart where a custom color scale is defined and reflected:\nimport plotly.express as px\nimport streamlit as st\n\nst.subheader(""Define a custom colorscale"")\ndf = px.data.iris()\nfig = px.scatter(\n    df,\n    x=""sepal_width"",\n    y=""sepal_length"",\n    color=""sepal_length"",\n    color_continuous_scale=""reds"",\n)\n\ntab1, tab2 = st.tabs([""Streamlit theme (default)"", ""Plotly native theme""])\nwith tab1:\n    st.plotly_chart(fig, theme=""streamlit"", use_container_width=True)\nwith tab2:\n    st.plotly_chart(fig, theme=None, use_container_width=True)\n\nNotice how the custom color scale is still reflected in the chart, even when the Streamlit theme is enabled 👇\nBuilt with Streamlit 🎈Fullscreen open_in_new\nFor many more examples of Plotly charts with and without the Streamlit theme, check out the plotly.streamlit.app.Previous: st.graphviz_chartNext: st.pydeck_chartforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","Custom color scales can be defined and reflected in Plotly charts when using Streamlit with the default theme enabled or disabled by specifying the color_continuous_scale parameter in the Plotly chart configuration. This allows users to customize the color scale of the chart, overriding the default colors set by the Streamlit theme.",simple,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.plotly_chart', 'title': 'st.plotly_chart - Streamlit Docs'}]",True,"When using Streamlit with the default theme enabled or disabled, custom color scales can still be defined and reflected in Plotly charts. You can overwrite the default Streamlit theme with custom colors or fonts in your chart configurations. For example, you can define a custom color scale using Plotly Express and see it reflected in the chart regardless of the Streamlit theme settings.",0.2857142857142857,0.9960450452634473
What selection modes does Streamlit's plotly_chart function offer and how can they be activated?,"[' function before the rest of the app.\nIn this case, st.plotly_chart will return the selection data\nas a dictionary.\n\n\n\nselection_mode\n(""points"", ""box"", ""lasso"" or an Iterable of these)\n\n \nThe selection mode of the chart. This can be one of the following:\n\n""points"": The chart will allow selections based on individual\ndata points.\n""box"": The chart will allow selections based on rectangular\nareas.\n""lasso"": The chart will allow selections based on freeform\nareas.\nAn Iterable of the above options: The chart will allow\nselections based on the modes specified.\n\nAll selections modes are activated by default.\n\n\n**kwargs\n(null)\n\n \nAny argument accepted by Plotly\'s plot() function.\nReturns(element or dict)  If on_select is ""ignore"" (default), this method returns an\ninternal placeholder for the chart element. Otherwise, this method\nreturns a dictionary-like object that supports both key and\nattribute notation. The attributes are described by the\nPlotlyState dictionary schema.\nExample\nThe example below comes straight from the examples at\nhttps://plot.ly/python. Note that plotly.figure_factory requires\nscipy to run.\n\nimport streamlit as st\nimport numpy as np\nimport plotly.figure_factory as ff\n\n# Add histogram data\nx1 = np.random.randn(200) - 2\nx2 = np.random.randn(200)\nx3 = np.random.randn(200) + 2\n\n# Group data together\nhist_data = [x1, x2, x3]\n\ngroup_labels = [\'Group 1\', \'Group 2\', \'Group 3\']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(\n        hist_data, group_labels, bin_size=[.1, .25, .5])\n\n# Plot!\nst.plotly_chart(fig, use_container_width=True)\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\n\nChart selections\nPlotlyStateStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeThe schema for the Plotly chart event state.\nThe event state is stored in a dictionary-like object that suports both\nkey and attribute notation. Event states cannot be programmatically\nchanged or set through Session State.\nOnly selection events are supported at this time.\nAttributes\n\nselection\n(dict)\n\n \n\nThe state of the on_select event. This attribure returns a\ndictionary-like object that supports both key and attribute\nnotation. The attributes are described by the\nPlotlySelectionState dictionary schema.\n\nExampleTry selecting points by any of the three available methods (direct click,\nbox, or lasso). The current selection state is available through Session\nState or as the output of the chart function.\n\nimport streamlit as st\nimport plotly.express as px\n\ndf = px.data.iris()  # iris is a pandas DataFrame\nfig = px.scatter(df, x=""sepal_width"", y=""sepal_length"")\n\nevent = st.plotly_chart(fig, key=""iris"", on_select=""rerun"")\n\nevent\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\nPlotlySelectionStateStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version']","The selection modes offered by Streamlit's plotly_chart function are 'points', 'box', 'lasso', or an Iterable of these options. These modes can be activated by specifying the selection_mode parameter with one of the mentioned options.",reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.plotly_chart', 'title': 'st.plotly_chart - Streamlit Docs'}]",True,"The selection modes offered by Streamlit's plotly_chart function are ""points"", ""box"", and ""lasso"". They can be activated by setting the selection_mode parameter to one or a combination of these modes when calling the function. The default selection mode is ('points', 'box', 'lasso').",0.8333333333333334,0.9866872085405684
What are the parameters for st.bokeh_chart and st.plotly_chart in Streamlit?,"[""st.bokeh_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.bokeh_chartst.bokeh_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay an interactive Bokeh chart.\nBokeh is a charting library for Python. The arguments to this function\nclosely follow the ones for Bokeh's show function. You can find\nmore about Bokeh at https://bokeh.pydata.org.\nTo show Bokeh charts in Streamlit, call st.bokeh_chart\nwherever you would call Bokeh's show.\nFunction signature[source] st.bokeh_chart(figure, use_container_width=False) Parameters\n\nfigure\n(bokeh.plotting.figure.Figure)\n\n \nA Bokeh figure to plot.\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure's native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\nExample\n\nimport streamlit as st\nfrom bokeh.plotting import figure\n\nx = [1, 2, 3, 4, 5]\ny = [6, 7, 2, 4, 5]\n\np = figure(\n    title='simple line example',\n    x_axis_label='x',\n    y_axis_label='y')\n\np.line(x, y, legend_label='Trend', line_width=2)\n\nst.bokeh_chart(p, use_container_width=True)\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\nPrevious: st.altair_chartNext: st.graphviz_chartforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy""
 'st.plotly_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.plotly_chartst.plotly_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay an interactive Plotly chart.\nPlotly is a charting library for Python.\nThe arguments to this function closely follow the ones for Plotly\'s\nplot() function.\nTo show Plotly charts in Streamlit, call st.plotly_chart wherever\nyou would call Plotly\'s py.plot or py.iplot.\nFunction signature[source] st.plotly_chart(figure_or_data, use_container_width=False, *, theme=""streamlit"", key=None, on_select=""ignore"", selection_mode=(\'points\', \'box\', \'lasso\'), **kwargs) Parameters\n\nfigure_or_data\n(plotly.graph_objs.Figure, plotly.graph_objs.Data,            or dict/list of plotly.graph_objs.Figure/Data)\n\n \nThe Plotly Figure or Data object to render. See\nhttps://plot.ly/python/ for examples of graph descriptions.\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure\'s native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\n\n\ntheme\n(""streamlit"" or None)\n\n \nThe theme of the chart. If theme is ""streamlit"" (default),\nStreamlit uses its own design default. If theme is None,\nStreamlit falls back to the default behavior of the library.\n\n\nkey\n(str)\n\n \nAn optional string to use for giving this element a stable\nidentity. If key is None (default), this element\'s identity\nwill be determined based on the values of the other parameters.\nAdditionally, if selections are activated and key is provided,\nStreamlit will register the key in Session State to store the\nselection state. The selection state is read-only.\n\n\non_select\n(""ignore"" or ""rerun"" or callable)\n\n \nHow the figure should respond to user selection events. This\ncontrols whether or not the figure behaves like an input widget.\non_select can be one of the following:\n\n""ignore"" (default): Streamlit will not react to any selection\nevents in the chart. The figure will not behave like an input\nwidget.\n""rerun"": Streamlit will rerun the app when the user selects\ndata in the chart. In this case, st.plotly_chart will return\nthe selection data as a dictionary.\nA callable: Streamlit will rerun the app and execute the\ncallable as a callback']","st.bokeh_chart has parameters 'figure' and 'use_container_width'. st.plotly_chart has parameters 'figure_or_data', 'use_container_width', 'theme', 'key', 'on_select', and 'selection_mode'.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.bokeh_chart', 'title': 'st.bokeh_chart - Streamlit Docs'}
 {'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.plotly_chart', 'title': 'st.plotly_chart - Streamlit Docs'}]",True,"The parameters for st.bokeh_chart in Streamlit are: figure and use_container_width. The figure parameter is the Bokeh figure to display, while use_container_width is a boolean flag to determine if the chart should expand to the full width of the container. You can find more information about Bokeh at https://bokeh.pydata.org.",0.4,0.9673390098317398
Which third-party component enables real-time video/audio stream handling and a sketching canvas in Streamlit?,"['Media elements - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsremovest.audiost.imagest.logost.videoLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Media elementsMedia elements\nIt\'s easy to embed images, videos, and audio files directly into your Streamlit apps.\nImageDisplay an image or list of images.st.image(numpy_array)\nst.image(image_bytes)\nst.image(file)\nst.image(""https://example.com/myimage.jpg"")\nLogoDisplay a logo in the upper-left corner of your app and its sidebar.st.logo(""logo.jpg"")\nAudioDisplay an audio player.st.audio(numpy_array)\nst.audio(audio_bytes)\nst.audio(file)\nst.audio(""https://example.com/myaudio.mp3"", format=""audio/mp3"")\nVideoDisplay a video player.st.video(numpy_array)\nst.video(video_bytes)\nst.video(file)\nst.video(""https://example.com/myvideo.mp4"", format=""video/mp4"")\n\nThird-party componentsThese are featured components created by our lovely community. If you don\'t see what you\'re looking for, check out our Components Hub app and Streamlit Extras for more examples and inspiration! PreviousStreamlit CropperA simple image cropper for Streamlit. Created by @turner-anderson.from streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\nImage CoordinatesGet the coordinates of clicks on an image. Created by @blackary.from streamlit_image_coordinates import streamlit_image_coordinates\n\nstreamlit_image_coordinates(""https://placekitten.com/200/300"")\nStreamlit LottieIntegrate Lottie animations inside your Streamlit app. Created by @andfanilo.lottie_hello = load_lottieurl(""https://assets5.lottiefiles.com/packages/lf20_V9t630.json"")\n\nst_lottie(lottie_hello, key=""hello"")\nStreamlit WebrtcHandling and transmitting real-time video/audio streams with Streamlit. Created by @whitphx.from streamlit_webrtc import webrtc_streamer\n\nwebrtc_streamer(key=""sample"")\nDrawable CanvasProvides a sketching canvas using Fabric.js. Created by @andfanilo.from streamlit_drawable_canvas import st_canvas\n\nst_canvas(fill_color=""rgba(255, 165, 0, 0.3)"", stroke_width=stroke_width, stroke_color=stroke_color, background_color=bg_color, background_image=Image.open(bg_image) if bg_image else None, update_streamlit=realtime_update, height=150, drawing_mode=drawing_mode, point_display_radius=point_display_radius if drawing_mode == \'point\' else 0, key=""canvas"",)\nImage ComparisonCompare images with a slider using JuxtaposeJS. Created by @fcakyon.from streamlit_image_comparison import image_comparison\n\nimage_comparison(img1=""image1.jpg"", img2=""image2.jpg"",)\nStreamlit CropperA simple image cropper for Streamlit. Created by @turner-anderson.from streamlit_cropper import st_cropper\n\nst_cropper(img, realtime_update=realtime_update, box_color=box_color, aspect_ratio=aspect_ratio)\nImage CoordinatesGet the coordinates of clicks on an image. Created by @blackary.from streamlit_image_coordinates import']","Streamlit Webrtc enables real-time video/audio stream handling, while Drawable Canvas provides a sketching canvas in Streamlit.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/media', 'title': 'Media elements - Streamlit Docs'}]",True,"I'm sorry, I don't have the specific information about a third-party component in Streamlit that enables real-time video/audio stream handling and a sketching canvas.",0.6666666666666666,0.0
How does Streamlit app testing framework help with headless tests and which class is used for simulating app behavior and API inspections?,"['App testing - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingremovest.testing.v1.AppTestTesting element classesCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/App testingApp testing\nStreamlit app testing framework enables developers to build and run headless tests that execute their app code directly, simulate user input, and inspect rendered outputs for correctness.\nThe provided class, AppTest, simulates a running app and provides methods to set up, manipulate, and inspect the app contents via API instead of a browser UI. It can be used to write automated tests of an app in various scenarios. These can then be run using a tool like pytest. A typical pattern is to build a suite of tests for an app that ensure consistent functionality as the app evolves, and run the tests locally and/or in a CI environment like Github Actions.\nThe AppTest class\nst.testing.v1.AppTestst.testing.v1.AppTest simulates a running Streamlit app for testing.from streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(""streamlit_app.py"")\nat.secrets[""WORD""] = ""Foobar""\nat.run()\nassert not at.exception\n\nat.text_input(""word"").input(""Bazbat"").run()\nassert at.warning[0].value == ""Try again.""\nAppTest.from_filest.testing.v1.AppTest.from_file initializes a simulated app from a file.from streamlit.testing.v1 import AppTest\n\nat = AppTest.from_file(""streamlit_app.py"")\nat.secrets[""WORD""] = ""Foobar""\nat.run()\nassert not at.exception\nAppTest.from_stringst.testing.v1.AppTest.from_string initializes a simulated app from a string.from streamlit.testing.v1 import AppTest\n\napp_script = """"""\nimport streamlit as st\n\nword_of_the_day = st.text_input(""What\'s the word of the day?"", key=""word"")\nif word_of_the_day == st.secrets[""WORD""]:\n    st.success(""That\'s right!"")\nelif word_of_the_day and word_of_the_day != st.secrets[""WORD""]:\n    st.warn(""Try again."")\n""""""\n\nat = AppTest.from_string(app_script)\nat.secrets[""WORD""] = ""Foobar""\nat.run()\nassert not at.exception\nAppTest.from_functionst.testing.v1.AppTest.from_function initializes a simulated app from a function.from streamlit.testing.v1 import AppTest\n\ndef app_script ():\n    import streamlit as st\n\n    word_of_the_day = st.text_input(""What\'s the word of the day?"", key=""word"")\n    if word_of_the_day == st.secrets[""WORD""]:\n        st.success(""That\'s right!"")\n    elif word_of_the_day and word_of_the_day != st.secrets[""WORD""]:\n        st.warn(""Try again."")\n\nat = AppTest.from_function(app_script)\nat.secrets[""WORD""] = ""Foobar""\nat.run()\nassert not at.exception\n\nTesting-element classes\nBlockA representation of container elements, including:\nst.chat_message\nst.columns\nst.sidebar\nst.tabs\nThe main body of the app.\n# at.sidebar returns a Block\nat.sidebar.button[0].click().run()\nassert not at.exception\nElementThe base class for representation of all elements, including']","Streamlit app testing framework enables developers to build and run headless tests that execute their app code directly, simulate user input, and inspect rendered outputs for correctness. The provided class, AppTest, simulates a running app and provides methods to set up, manipulate, and inspect the app contents via API instead of a browser UI.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/app-testing', 'title': 'App testing - Streamlit Docs'}]",True,"The Streamlit app testing framework allows for headless tests that directly run app code, simulate user input, and check outputs for correctness. The AppTest class in Streamlit, located in st.testing.v1.AppTest, is used to simulate app behavior and inspect API interactions for testing purposes. This class provides methods to manipulate app contents via API, enabling developers to write automated tests and ensure consistent app functionality across different scenarios.",0.7142857142857143,0.8919521966196217
How to connect to data source or API in Streamlit with caching and session state?,"['ary.from st_pages import Page, show_pages, add_page_title\n\nshow_pages([ Page(""streamlit_app.py"", ""Home"", ""🏠""),\n  Page(""other_pages/page2.py"", ""Page 2"", "":books:""), ])\n\nCaching and state\n\nCache dataFunction decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).@st.cache_data\ndef long_function(param1, param2):\n  # Perform expensive computation here or\n  # fetch data from the web here\n  return data\nCache resourceFunction decorator to cache functions that return global resources (e.g. database connections, ML models).@st.cache_resource\ndef init_model():\n  # Return a global resource here\n  return pipeline(\n    ""sentiment-analysis"",\n    model=""distilbert-base-uncased-finetuned-sst-2-english""\n  )\nSession stateSession state is a way to share variables between reruns, for each user session.st.session_state[\'key\'] = value\nQuery parametersGet, set, or clear the query parameters that are shown in the browser\'s URL bar.st.query_params[key] = value\nst.query_params.clear()\n\nConnections and databases\nSetup your connection\nCreate a connectionConnect to a data source or APIconn = st.connection(\'pets_db\', type=\'sql\')\npet_owners = conn.query(\'select * from pet_owners\')\nst.dataframe(pet_owners)\n\nBuilt-in connections\nSnowflakeConnectionA connection to Snowflake.conn = st.connection(\'snowflake\')\nSQLConnectionA connection to a SQL database using SQLAlchemy.conn = st.connection(\'sql\')\n\nBuild your own connections\nConnection base classBuild your own connection with BaseConnection.class MyConnection(BaseConnection[myconn.MyConnection]):\n    def _connect(self, **kwargs) -> MyConnection:\n        return myconn.connect(**self._secrets, **kwargs)\n    def query(self, query):\n        return self._instance.query(query)\n\nSecrets management\nSecrets singletonAccess secrets from a local TOML file.key = st.secrets[""OpenAI_key""]\nSecrets fileSave your secrets in a per-project or per-profile TOML file.OpenAI_key = ""<YOUR_SECRET_KEY>""\n\nThird-party componentsThese are featured components created by our lovely community. If you don\'t see what you\'re looking for, check out our Components Hub app and Streamlit Extras for more examples and inspiration!AuthenticatorA secure authentication module to validate user credentials. Created by @mkhorasani.import streamlit_authenticator as stauth\n\nauthenticator = stauth.Authenticate( config[\'credentials\'], config[\'cookie\'][\'name\'],\nconfig[\'cookie\'][\'key\'], config[\'cookie\'][\'expiry_days\'], config[\'preauthorized\'])\nWS localStorageA simple synchronous way of accessing localStorage from your app. Created by @gagangoku.from streamlit_ws_localstorage import injectWebsocketCode\n\nret = conn.setLocalStorageVal(key=\'k1\', val=\'v1\')\nst.write(\'ret: \' + ret)\nStreamlit Auth0The fastest way to provide comprehensive login inside Streamlit. Created by @conradbez.from auth0_component import login_button\n\nuser_info = login_button(clientId, domain = domain)\nst.write(user_info)\n\nCustom Components\n\nDeclare a componentCreate and register a custom component.st.components.v1.declare_component(\n    ""custom_slider"",\n    ""/frontend"",\n)\nHTMLDisplay an HTML string in an iframe.st.components.v1.html(\n    ""<p>Foo bar.</p>""\n)\niframeLoad a remote URL in an iframe.st.components.v1.iframe(\n    ""docs.streamlit.io""\n)\n\nUtilities and user info\n\nUser infost.experimental_user returns information about the logged-in user of private apps on Streamlit Community Cloud.if st.experimental_user.email == ""foo@corp.com"":\n  st.write(""Welcome back, "", st.experimental_user.email)\nelse']","Create a connection to a data source or API using 'st.connection' and utilize caching with 'st.cache_data' decorator for functions that return data. Additionally, use session state to share variables between reruns.",conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference', 'title': 'API Reference - Streamlit Docs'}]",True,"To connect to a data source or API in Streamlit with caching and session state, you can follow step-by-step guides provided in Streamlit documentation. These guides demonstrate how to use Streamlit's Secrets management and caching for secure and fast data access. By following these guides, you can easily establish a connection to your desired data source or API in your Streamlit app.",0.5,0.9972979591604342
"What does the PlotlyState dictionary schema describe for ""points"" selection mode?","[' function before the rest of the app.\nIn this case, st.plotly_chart will return the selection data\nas a dictionary.\n\n\n\nselection_mode\n(""points"", ""box"", ""lasso"" or an Iterable of these)\n\n \nThe selection mode of the chart. This can be one of the following:\n\n""points"": The chart will allow selections based on individual\ndata points.\n""box"": The chart will allow selections based on rectangular\nareas.\n""lasso"": The chart will allow selections based on freeform\nareas.\nAn Iterable of the above options: The chart will allow\nselections based on the modes specified.\n\nAll selections modes are activated by default.\n\n\n**kwargs\n(null)\n\n \nAny argument accepted by Plotly\'s plot() function.\nReturns(element or dict)  If on_select is ""ignore"" (default), this method returns an\ninternal placeholder for the chart element. Otherwise, this method\nreturns a dictionary-like object that supports both key and\nattribute notation. The attributes are described by the\nPlotlyState dictionary schema.\nExample\nThe example below comes straight from the examples at\nhttps://plot.ly/python. Note that plotly.figure_factory requires\nscipy to run.\n\nimport streamlit as st\nimport numpy as np\nimport plotly.figure_factory as ff\n\n# Add histogram data\nx1 = np.random.randn(200) - 2\nx2 = np.random.randn(200)\nx3 = np.random.randn(200) + 2\n\n# Group data together\nhist_data = [x1, x2, x3]\n\ngroup_labels = [\'Group 1\', \'Group 2\', \'Group 3\']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(\n        hist_data, group_labels, bin_size=[.1, .25, .5])\n\n# Plot!\nst.plotly_chart(fig, use_container_width=True)\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\n\nChart selections\nPlotlyStateStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeThe schema for the Plotly chart event state.\nThe event state is stored in a dictionary-like object that suports both\nkey and attribute notation. Event states cannot be programmatically\nchanged or set through Session State.\nOnly selection events are supported at this time.\nAttributes\n\nselection\n(dict)\n\n \n\nThe state of the on_select event. This attribure returns a\ndictionary-like object that supports both key and attribute\nnotation. The attributes are described by the\nPlotlySelectionState dictionary schema.\n\nExampleTry selecting points by any of the three available methods (direct click,\nbox, or lasso). The current selection state is available through Session\nState or as the output of the chart function.\n\nimport streamlit as st\nimport plotly.express as px\n\ndf = px.data.iris()  # iris is a pandas DataFrame\nfig = px.scatter(df, x=""sepal_width"", y=""sepal_length"")\n\nevent = st.plotly_chart(fig, key=""iris"", on_select=""rerun"")\n\nevent\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\nPlotlySelectionStateStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version']",The PlotlyState dictionary schema describes the state of the on_select event for 'points' selection mode. This attribute returns a dictionary-like object that supports both key and attribute notation.,conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.plotly_chart', 'title': 'st.plotly_chart - Streamlit Docs'}]",True,"The PlotlyState dictionary schema for ""points"" selection mode describes the attributes of the selected points, such as the curve number, point number, x and y coordinates, custom data, marker size, and legend group. The selection state also includes the indices of the selected points in the ""point_indices"" attribute. Additionally, the schema provides information on the selected points using different selection methods like box and lasso.",0.6,0.9983604448650382
How can text elements be displayed in a Streamlit app using st.write and magic commands?,"['st.write and magic commands - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicremovest.writest.write_streammagicText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Write and magicst.write and magic commands\nStreamlit has two easy ways to display information into your app, which should typically be the\nfirst thing you try: st.write and magic.\nst.writeWrite arguments to the app.st.write(""Hello **world**!"")\nst.write(my_data_frame)\nst.write(my_mpl_figure)\nst.write_streamWrite generators or streams to the app with a typewriter effect.st.write_stream(my_generator)\nst.write_stream(my_llm_stream)\nMagicAny time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using st.write""Hello **world**!""\nmy_data_frame\nmy_mpl_figure\nPrevious: API referenceNext: st.writeforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","Text elements can be displayed in a Streamlit app using st.write and magic commands. With st.write, you can write arguments directly to the app like st.write(""Hello **world**!"") or display data frames and Matplotlib figures. Magic in Streamlit automatically writes variables or literal values to the app when they are on their own line.",simple,"[{'source': 'https://docs.streamlit.io/develop/api-reference/write-magic', 'title': 'st.write and magic commands - Streamlit Docs'}]",True,"You can display text elements in a Streamlit app using st.write and magic commands. The st.write function allows you to write arguments directly into the app, such as text, data frames, and matplotlib figures. Additionally, Streamlit automatically writes variables or literal values to the app using magic commands when they are on their own line.",0.6,0.9348199373737783
How can users interact with chart annotations using emojis?,"['      x=""date"",\n            y=""price"",\n            color=""symbol"",\n        )\n    )\n\n    # Draw points on the line, and highlight based on selection\n    points = lines.transform_filter(hover).mark_circle(size=65)\n\n    # Draw a rule at the location of the selection\n    tooltips = (\n        alt.Chart(data)\n        .mark_rule()\n        .encode(\n            x=""yearmonthdate(date)"",\n            y=""price"",\n            opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),\n            tooltip=[\n                alt.Tooltip(""date"", title=""Date""),\n                alt.Tooltip(""price"", title=""Price (USD)""),\n            ],\n        )\n        .add_selection(hover)\n    )\n    return (lines + points + tooltips).interactive()\n\nchart = get_chart(source)\n\nStep 2: Annotate the chart\nNow that we have our first chart that shows the data, we can annotate it with text and an emoji. Let\'s overlay the ⬇ emoji on top of the time-series chart at specifc points of interest. We want users to hover over the ⬇ emoji to see the associated annotation text.\nFor simplicity, let\'s annotate four specific dates and set the height of the annotations at constant value of 10.\nstarTipYou can vary the horizontal and vertical postions of the annotations by replacing the hard-coded values with the output of Streamlit widgets! Click here to jump to a live example below, and develop an intuition for the ideal horizontal and vertical positions of the annotations by playing with Streamlit widgets.\nTo do so, we create a dataframe annotations_df containing the dates, annotation text, and the height of the annotations:\n# Add annotations\nANNOTATIONS = [\n    (""Mar 01, 2008"", ""Pretty good day for GOOG""),\n    (""Dec 01, 2007"", ""Something\'s going wrong for GOOG & AAPL""),\n    (""Nov 01, 2008"", ""Market starts again thanks to...""),\n    (""Dec 01, 2009"", ""Small crash for GOOG after...""),\n]\nannotations_df = pd.DataFrame(ANNOTATIONS, columns=[""date"", ""event""])\nannotations_df.date = pd.to_datetime(annotations_df.date)\nannotations_df[""y""] = 10\n\nUsing this dataframe, we create a scatter plot with the x-axis representing the date, and the y-axis representing the height of the annotation. The data point at the specific date and height is represented by the ⬇ emoji, using Altair\'s mark_text() mark.\nThe annotation text is displayed as a tooltip when users hover over the ⬇ emoji. This is achieved using Altair\'s encode() method to map the event column containing the annotation text to the visual attribute ⬇ of the plot.\nannotation_layer = (\n    alt.Chart(annotations_df)\n    .mark_text(size=20, text=""⬇"", dx=-8, dy=-10, align=""left"")\n    .encode(\n        x=""date:T"",\n        y=alt.Y(""y:Q""),\n        tooltip=[""event""],\n    )\n    .interactive()\n)\n\nFinally, we overlay the annotations on top of the base chart using the + operator to create the final layered chart! 🎈\nst.altair_chart(\n    (chart + annotation_layer).interactive(),\n    use_container_width=True\n)\n\n\nTo use images instead of emojis, replace the line containing .mark_text() with .mark_image(), and replace image_']","Users can interact with chart annotations using emojis by hovering over the emojis to see the associated annotation text. The emojis are placed at specific points of interest on the time-series chart, and when hovered over, the annotation text is displayed as a tooltip.",reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}]",True,"Users can interact with chart annotations using emojis by overlaying emojis on top of the chart at specific points of interest. For example, users can hover over the emojis to see associated annotation text. By creating a dataframe containing dates, annotation text, and the height of the annotations, users can customize the annotations with emojis. To set the position of the emojis on the chart, users can vary the horizontal and vertical positions by using Streamlit widgets.",0.6,0.9999999999997501
How can user selection events trigger app rerun in Altair charts using st.altair_chart in Streamlit?,"['st.altair_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.altair_chartst.altair_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay a chart using the Vega-Altair library.\nVega-Altair is a declarative\nstatistical visualization library for Python, based on Vega and\nVega-Lite.\nFunction signature[source] st.altair_chart(altair_chart, *, use_container_width=False, theme=""streamlit"", key=None, on_select=""ignore"", selection_mode=None) Parameters\n\naltair_chart\n(altair.Chart)\n\n \nThe Altair chart object to display. See\nhttps://altair-viz.github.io/gallery/ for examples of graph\ndescriptions.\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure\'s native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\n\n\ntheme\n(""streamlit"" or None)\n\n \nThe theme of the chart. If theme is ""streamlit"" (default),\nStreamlit uses its own design default. If theme is None,\nStreamlit falls back to the default behavior of the library.\n\n\nkey\n(str)\n\n \nAn optional string to use for giving this element a stable\nidentity. If key is None (default), this element\'s identity\nwill be determined based on the values of the other parameters.\nAdditionally, if selections are activated and key is provided,\nStreamlit will register the key in Session State to store the\nselection state. The selection state is read-only.\n\n\non_select\n(""ignore"", ""rerun"", or callable)\n\n \nHow the figure should respond to user selection events. This\ncontrols whether or not the figure behaves like an input widget.\non_select can be one of the following:\n\n""ignore"" (default): Streamlit will not react to any selection\nevents in the chart. The figure will not behave like an input\nwidget.\n""rerun"": Streamlit will rerun the app when the user selects\ndata in the chart. In this case, st.altair_chart will return\nthe selection data as a dictionary.\nA callable: Streamlit will rerun the app and execute the\ncallable as a callback function before the rest of the app.\nIn this case, st.altair_chart will return the selection data\nas a dictionary.\n\nTo use selection events, the object passed to altair_chart must\ninclude selection paramters. To learn about defining interactions\nin Altair and how to declare selection-type parameters, see\nInteractive Charts\nin Altair\'s documentation']","User selection events can trigger app rerun in Altair charts using st.altair_chart in Streamlit by setting the 'on_select' parameter to 'rerun'. This will cause the app to rerun when the user selects data in the chart, and st.altair_chart will return the selection data as a dictionary.",reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}]",True,"To trigger app rerun in Altair charts using st.altair_chart in Streamlit, you can set the selection_mode parameter to ""rerun"". This will enable the app to react when the user selects data in the chart and return the selection data as a dictionary. You can also use a callable function as a callback before rerunning the app when selection events occur.",0.5,0.9619941075661842
How does Altair library help with interactive charts in Python and what parameters can be adjusted in st.altair_chart in Streamlit?,"['st.altair_chart - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicaddText elementsaddData elementsaddChart elementsremoveSIMPLEst.area_chartst.bar_chartst.line_chartst.mapst.scatter_chartADVANCEDst.altair_chartst.bokeh_chartst.graphviz_chartst.plotly_chartst.pydeck_chartst.pyplotst.vega_lite_chartInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Chart elements/st.altair_chartst.altair_chartStreamlit VersionVersion 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0Version 1.19.0Version 1.18.0Version 1.17.0Version 1.16.0Version 1.15.0Version 1.14.0Version 1.13.0Streamlit in SnowflakeDisplay a chart using the Vega-Altair library.\nVega-Altair is a declarative\nstatistical visualization library for Python, based on Vega and\nVega-Lite.\nFunction signature[source] st.altair_chart(altair_chart, *, use_container_width=False, theme=""streamlit"", key=None, on_select=""ignore"", selection_mode=None) Parameters\n\naltair_chart\n(altair.Chart)\n\n \nThe Altair chart object to display. See\nhttps://altair-viz.github.io/gallery/ for examples of graph\ndescriptions.\n\n\nuse_container_width\n(bool)\n\n \nWhether to override the figure\'s native width with the width of\nthe parent container. If use_container_width is False\n(default), Streamlit sets the width of the chart to fit its contents\naccording to the plotting library, up to the width of the parent\ncontainer. If use_container_width is True, Streamlit sets\nthe width of the figure to match the width of the parent container.\n\n\ntheme\n(""streamlit"" or None)\n\n \nThe theme of the chart. If theme is ""streamlit"" (default),\nStreamlit uses its own design default. If theme is None,\nStreamlit falls back to the default behavior of the library.\n\n\nkey\n(str)\n\n \nAn optional string to use for giving this element a stable\nidentity. If key is None (default), this element\'s identity\nwill be determined based on the values of the other parameters.\nAdditionally, if selections are activated and key is provided,\nStreamlit will register the key in Session State to store the\nselection state. The selection state is read-only.\n\n\non_select\n(""ignore"", ""rerun"", or callable)\n\n \nHow the figure should respond to user selection events. This\ncontrols whether or not the figure behaves like an input widget.\non_select can be one of the following:\n\n""ignore"" (default): Streamlit will not react to any selection\nevents in the chart. The figure will not behave like an input\nwidget.\n""rerun"": Streamlit will rerun the app when the user selects\ndata in the chart. In this case, st.altair_chart will return\nthe selection data as a dictionary.\nA callable: Streamlit will rerun the app and execute the\ncallable as a callback function before the rest of the app.\nIn this case, st.altair_chart will return the selection data\nas a dictionary.\n\nTo use selection events, the object passed to altair_chart must\ninclude selection paramters. To learn about defining interactions\nin Altair and how to declare selection-type parameters, see\nInteractive Charts\nin Altair\'s documentation']","The Altair library helps create interactive charts in Python by allowing users to define selection parameters for interactive elements. In Streamlit, the st.altair_chart function allows users to adjust parameters such as use_container_width, theme, key, and on_select to customize the display and behavior of the Altair chart.",reasoning,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}]",True,"The Altair library in Streamlit helps with creating interactive charts by allowing users to adjust parameters such as size, color, and tooltips for data visualization. In the st.altair_chart function in Streamlit, parameters that can be adjusted include the chart object (c), the width of the container (with use_container_width=True), and potentially other parameters specific to Altair chart customization.",0.4444444444444444,0.9352007927020344
What are the main ways to display info and access user data in a Streamlit app?,"['st.write and magic commands - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicremovest.writest.write_streammagicText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Write and magicst.write and magic commands\nStreamlit has two easy ways to display information into your app, which should typically be the\nfirst thing you try: st.write and magic.\nst.writeWrite arguments to the app.st.write(""Hello **world**!"")\nst.write(my_data_frame)\nst.write(my_mpl_figure)\nst.write_streamWrite generators or streams to the app with a typewriter effect.st.write_stream(my_generator)\nst.write_stream(my_llm_stream)\nMagicAny time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using st.write""Hello **world**!""\nmy_data_frame\nmy_mpl_figure\nPrevious: API referenceNext: st.writeforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","The main ways to display information and access user data in a Streamlit app are using st.write and magic commands. st.write allows you to write arguments, data frames, and matplotlib figures to the app, while magic automatically writes variables or literal values to the app.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/write-magic', 'title': 'st.write and magic commands - Streamlit Docs'}]",True,"In a Streamlit app, you can display information using the `st.write` function and magic commands. Additionally, you can access user data by connecting your app to various databases and APIs using Streamlit's Secrets management and caching for secure and fast data access.",0.4,0.9458767771947655
"How to display text dynamically in a Streamlit app with st.write and magic commands, including user info and placeholders?","['st.write and magic commands - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceremovePAGE ELEMENTSWrite and magicremovest.writest.write_streammagicText elementsaddData elementsaddChart elementsaddInput widgetsaddMedia elementsaddLayouts and containersaddChat elementsaddStatus elementsaddThird-party componentsopen_in_newAPPLICATION LOGICNavigation and pagesaddExecution flowaddCaching and stateaddConnections and secretsaddCustom componentsaddUtilitiesaddConfigurationaddTOOLSApp testingaddCommand lineaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/API reference/Write and magicst.write and magic commands\nStreamlit has two easy ways to display information into your app, which should typically be the\nfirst thing you try: st.write and magic.\nst.writeWrite arguments to the app.st.write(""Hello **world**!"")\nst.write(my_data_frame)\nst.write(my_mpl_figure)\nst.write_streamWrite generators or streams to the app with a typewriter effect.st.write_stream(my_generator)\nst.write_stream(my_llm_stream)\nMagicAny time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using st.write""Hello **world**!""\nmy_data_frame\nmy_mpl_figure\nPrevious: API referenceNext: st.writeforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","Streamlit provides two easy ways to display information dynamically in your app: st.write and magic commands. With st.write, you can write arguments directly to the app, such as text, data frames, or Matplotlib figures. Additionally, st.write_stream allows you to write generators or streams with a typewriter effect. On the other hand, magic commands automatically display variables or literal values on their own line using st.write. This feature is useful for displaying user information and placeholders dynamically in your Streamlit app.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/write-magic', 'title': 'st.write and magic commands - Streamlit Docs'}]",True,"You can display text dynamically in a Streamlit app using st.write and magic commands. st.write allows you to write arguments, data frames, and figures, while magic commands automatically display variables or literal values. You can also use st.title, st.header, st.subheader for different heading levels and st.text or st.markdown for text and Markdown formatting.",0.625,0.9228995632098927
What role does annotation text play in charts and how does it improve data visualization?,"['      x=""date"",\n            y=""price"",\n            color=""symbol"",\n        )\n    )\n\n    # Draw points on the line, and highlight based on selection\n    points = lines.transform_filter(hover).mark_circle(size=65)\n\n    # Draw a rule at the location of the selection\n    tooltips = (\n        alt.Chart(data)\n        .mark_rule()\n        .encode(\n            x=""yearmonthdate(date)"",\n            y=""price"",\n            opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),\n            tooltip=[\n                alt.Tooltip(""date"", title=""Date""),\n                alt.Tooltip(""price"", title=""Price (USD)""),\n            ],\n        )\n        .add_selection(hover)\n    )\n    return (lines + points + tooltips).interactive()\n\nchart = get_chart(source)\n\nStep 2: Annotate the chart\nNow that we have our first chart that shows the data, we can annotate it with text and an emoji. Let\'s overlay the ⬇ emoji on top of the time-series chart at specifc points of interest. We want users to hover over the ⬇ emoji to see the associated annotation text.\nFor simplicity, let\'s annotate four specific dates and set the height of the annotations at constant value of 10.\nstarTipYou can vary the horizontal and vertical postions of the annotations by replacing the hard-coded values with the output of Streamlit widgets! Click here to jump to a live example below, and develop an intuition for the ideal horizontal and vertical positions of the annotations by playing with Streamlit widgets.\nTo do so, we create a dataframe annotations_df containing the dates, annotation text, and the height of the annotations:\n# Add annotations\nANNOTATIONS = [\n    (""Mar 01, 2008"", ""Pretty good day for GOOG""),\n    (""Dec 01, 2007"", ""Something\'s going wrong for GOOG & AAPL""),\n    (""Nov 01, 2008"", ""Market starts again thanks to...""),\n    (""Dec 01, 2009"", ""Small crash for GOOG after...""),\n]\nannotations_df = pd.DataFrame(ANNOTATIONS, columns=[""date"", ""event""])\nannotations_df.date = pd.to_datetime(annotations_df.date)\nannotations_df[""y""] = 10\n\nUsing this dataframe, we create a scatter plot with the x-axis representing the date, and the y-axis representing the height of the annotation. The data point at the specific date and height is represented by the ⬇ emoji, using Altair\'s mark_text() mark.\nThe annotation text is displayed as a tooltip when users hover over the ⬇ emoji. This is achieved using Altair\'s encode() method to map the event column containing the annotation text to the visual attribute ⬇ of the plot.\nannotation_layer = (\n    alt.Chart(annotations_df)\n    .mark_text(size=20, text=""⬇"", dx=-8, dy=-10, align=""left"")\n    .encode(\n        x=""date:T"",\n        y=alt.Y(""y:Q""),\n        tooltip=[""event""],\n    )\n    .interactive()\n)\n\nFinally, we overlay the annotations on top of the base chart using the + operator to create the final layered chart! 🎈\nst.altair_chart(\n    (chart + annotation_layer).interactive(),\n    use_container_width=True\n)\n\n\nTo use images instead of emojis, replace the line containing .mark_text() with .mark_image(), and replace image_'
 '            title=""Maximum Daily Temperature (C)"",\n            scale=alt.Scale(domain=[-5, 40]),\n        ),\n        color=alt.condition(brush, color, alt.value(""lightgray"")),\n        size=alt.Size(""precipitation:Q"", scale=alt.Scale(range=[5, 200])),\n    )\n    .properties(width=550, height=300)\n    .add_selection(brush)\n    .transform_filter(click)\n)\n\n# Bottom panel is a bar chart of weather type\nbars = (\n    alt.Chart()\n    .mark_bar()\n    .encode(\n        x=""count()"",\n        y=""weather:N"",\n        color=alt.condition(click, color, alt.value(""lightgray"")),\n    )\n    .transform_filter(brush)\n    .properties(\n        width=550,\n    )\n    .add_selection(click)\n)\n\nchart = alt.vconcat(points, bars, data=source, title=""Seattle Weather: 2012-2015"")\n\ntab1, tab2 = st.tabs([""Streamlit theme (default)"", ""Altair native theme""])\n\nwith tab1:\n    st.altair_chart(chart, theme=""streamlit"", use_container_width=True)\nwith tab2:\n    st.altair_chart(chart, theme=None, use_container_width=True)\n\nNotice how the custom colors are still reflected in the chart, even when the Streamlit theme is enabled 👇\nBuilt with Streamlit 🎈Fullscreen open_in_new\nFor many more examples of Altair charts with and without the Streamlit theme, check out the altair.streamlit.app.\nAnnotating charts\nAltair also allows you to annotate your charts with text, images, and emojis. You can do this by creating layered charts, which let you overlay two different charts on top of each other. The idea is to use the first chart to show the data, and the second chart to show the annotations. The second chart can then be overlaid on top of the first chart using the + operator to create a layered chart.\nLet\'s walk through an example of annotating a time-series chart with text and an emoji.\nStep 1: Create the base chart\nIn this example, we create a time-series chart to track the evolution of stock prices. The chart is interactive and contains a multi-line tooltip. Click here to learn more about multi-line tooltips in Altair.\nFirst, we import the required libraries and load the example stocks dataset using the vega_datasets package:\nimport altair as alt\nimport pandas as pd\nimport streamlit as st\nfrom vega_datasets import data\n\n# We use @st.cache_data to keep the dataset in cache\n@st.cache_data\ndef get_data():\n    source = data.stocks()\n    source = source[source.date.gt(""2004-01-01"")]\n    return source\n\nsource = get_data()\n\nNext, we define a function get_chart() to create the interactive time-series chart of the stock prices with a multi-line tooltip. The x-axis represents the date, and the y-axis represents the stock price.\nWe then invoke get_chart() that takes the stock prices dataframe as an input and returns a chart object. This is going to be our base chart on which we will overlay the annotations in Step 2.\n# Define the base time-series chart.\ndef get_chart(data):\n    hover = alt.selection_single(\n        fields=[""date""],\n        nearest=True,\n        on=""mouseover"",\n        empty=""none"",\n    )\n\n    lines = (\n        alt.Chart(data, title=""Evolution of stock prices"")\n        .mark_line()\n        .encode(\n      ']","Annotation text in charts provides additional context or information about specific data points or trends, enhancing the understanding of the data being visualized. It helps users interpret the chart more effectively by highlighting key points, events, or insights that may not be immediately apparent from the visual representation alone. This improves data visualization by making it more informative, engaging, and actionable for the audience.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}
 {'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}]",True,"Annotation text in charts plays a crucial role in providing additional context or insights about specific data points or trends. By adding annotation text, users can easily understand key events or patterns in the data, enhancing the overall storytelling and interpretation of the visualization. This helps improve data visualization by making it more informative and engaging for the audience.",0.6666666666666666,0.9650679521402473
"Which cloud platforms and services are used in Streamlit app deployment tutorials, aside from Docker and Kubernetes?","['Deployment tutorials - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceaddTutorialsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsremoveDockerKubernetesschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Deploy/Other platformsDeployment tutorials\nThis sections contains step-by-step guides on how to deploy Streamlit apps to various cloud platforms and services. We have deployment guides for:\nStreamlit Community CloudDockerKubernetes\nWhile we work on official Streamlit deployment guides for other hosting providers, here are some user-submitted tutorials for different cloud services:\n\nHow to Deploy Streamlit to a Free Amazon EC2 instance, by Rahul Agarwal.\nHost Streamlit on Azure, by Richard Peterson.\nHow to deploy Streamlit apps to Google App Engine, by Yuichiro Tachibana (Tsuchiya).\nHost Streamlit on Heroku, by Maarten Grootendorst.\nDeploy Streamlit on Ploomber Cloud, by Ido Michael.\nHost Streamlit on 21YunBox, by Toby Lei.\nCommunity-supported deployment wiki.\nPrevious: Streamlit in SnowflakeNext: DockerforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","Amazon EC2, Azure, Google App Engine, Heroku, Ploomber Cloud, 21YunBox",conditional,"[{'source': 'https://docs.streamlit.io/deploy/tutorials', 'title': 'Deployment tutorials - Streamlit Docs'}]",True,"The Streamlit app deployment tutorials aside from Docker and Kubernetes include Streamlit Community Cloud and Streamlit in Snowflake. These are platforms where you can deploy and share your Streamlit apps. While official deployment guides for other hosting providers are in progress, user-submitted tutorials may exist for different cloud services as well.",0.0,0.9287273425051906
How to add annotations with emojis or images to an Altair chart?,"['      x=""date"",\n            y=""price"",\n            color=""symbol"",\n        )\n    )\n\n    # Draw points on the line, and highlight based on selection\n    points = lines.transform_filter(hover).mark_circle(size=65)\n\n    # Draw a rule at the location of the selection\n    tooltips = (\n        alt.Chart(data)\n        .mark_rule()\n        .encode(\n            x=""yearmonthdate(date)"",\n            y=""price"",\n            opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),\n            tooltip=[\n                alt.Tooltip(""date"", title=""Date""),\n                alt.Tooltip(""price"", title=""Price (USD)""),\n            ],\n        )\n        .add_selection(hover)\n    )\n    return (lines + points + tooltips).interactive()\n\nchart = get_chart(source)\n\nStep 2: Annotate the chart\nNow that we have our first chart that shows the data, we can annotate it with text and an emoji. Let\'s overlay the ⬇ emoji on top of the time-series chart at specifc points of interest. We want users to hover over the ⬇ emoji to see the associated annotation text.\nFor simplicity, let\'s annotate four specific dates and set the height of the annotations at constant value of 10.\nstarTipYou can vary the horizontal and vertical postions of the annotations by replacing the hard-coded values with the output of Streamlit widgets! Click here to jump to a live example below, and develop an intuition for the ideal horizontal and vertical positions of the annotations by playing with Streamlit widgets.\nTo do so, we create a dataframe annotations_df containing the dates, annotation text, and the height of the annotations:\n# Add annotations\nANNOTATIONS = [\n    (""Mar 01, 2008"", ""Pretty good day for GOOG""),\n    (""Dec 01, 2007"", ""Something\'s going wrong for GOOG & AAPL""),\n    (""Nov 01, 2008"", ""Market starts again thanks to...""),\n    (""Dec 01, 2009"", ""Small crash for GOOG after...""),\n]\nannotations_df = pd.DataFrame(ANNOTATIONS, columns=[""date"", ""event""])\nannotations_df.date = pd.to_datetime(annotations_df.date)\nannotations_df[""y""] = 10\n\nUsing this dataframe, we create a scatter plot with the x-axis representing the date, and the y-axis representing the height of the annotation. The data point at the specific date and height is represented by the ⬇ emoji, using Altair\'s mark_text() mark.\nThe annotation text is displayed as a tooltip when users hover over the ⬇ emoji. This is achieved using Altair\'s encode() method to map the event column containing the annotation text to the visual attribute ⬇ of the plot.\nannotation_layer = (\n    alt.Chart(annotations_df)\n    .mark_text(size=20, text=""⬇"", dx=-8, dy=-10, align=""left"")\n    .encode(\n        x=""date:T"",\n        y=alt.Y(""y:Q""),\n        tooltip=[""event""],\n    )\n    .interactive()\n)\n\nFinally, we overlay the annotations on top of the base chart using the + operator to create the final layered chart! 🎈\nst.altair_chart(\n    (chart + annotation_layer).interactive(),\n    use_container_width=True\n)\n\n\nTo use images instead of emojis, replace the line containing .mark_text() with .mark_image(), and replace image_']","To add annotations with emojis or images to an Altair chart, you can create a dataframe containing the dates, annotation text, and the height of the annotations. Then, use Altair's mark_text() or mark_image() mark to represent the data points at specific dates and heights with emojis or images. Map the annotation text to the visual attribute of the plot using Altair's encode() method, and overlay the annotations on top of the base chart using the + operator to create the final layered chart.",conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}]",True,"To add annotations with emojis or images to an Altair chart, you can create layered charts in Altair. The annotations can include text, emojis, or images and can be overlaid on top of the base chart. Use Altair's mark_text() method to place emojis or text at specific data points and encode() method to add tooltips for interactivity. Finally, overlay the annotations on the base chart using the + operator to create a layered chart.",0.7142857142857143,0.9977534591154846
What weather data is shown in the Seattle Weather chart for 2012-2015 with temperatures from -5°C to 40°C?,"['            title=""Maximum Daily Temperature (C)"",\n            scale=alt.Scale(domain=[-5, 40]),\n        ),\n        color=alt.condition(brush, color, alt.value(""lightgray"")),\n        size=alt.Size(""precipitation:Q"", scale=alt.Scale(range=[5, 200])),\n    )\n    .properties(width=550, height=300)\n    .add_selection(brush)\n    .transform_filter(click)\n)\n\n# Bottom panel is a bar chart of weather type\nbars = (\n    alt.Chart()\n    .mark_bar()\n    .encode(\n        x=""count()"",\n        y=""weather:N"",\n        color=alt.condition(click, color, alt.value(""lightgray"")),\n    )\n    .transform_filter(brush)\n    .properties(\n        width=550,\n    )\n    .add_selection(click)\n)\n\nchart = alt.vconcat(points, bars, data=source, title=""Seattle Weather: 2012-2015"")\n\ntab1, tab2 = st.tabs([""Streamlit theme (default)"", ""Altair native theme""])\n\nwith tab1:\n    st.altair_chart(chart, theme=""streamlit"", use_container_width=True)\nwith tab2:\n    st.altair_chart(chart, theme=None, use_container_width=True)\n\nNotice how the custom colors are still reflected in the chart, even when the Streamlit theme is enabled 👇\nBuilt with Streamlit 🎈Fullscreen open_in_new\nFor many more examples of Altair charts with and without the Streamlit theme, check out the altair.streamlit.app.\nAnnotating charts\nAltair also allows you to annotate your charts with text, images, and emojis. You can do this by creating layered charts, which let you overlay two different charts on top of each other. The idea is to use the first chart to show the data, and the second chart to show the annotations. The second chart can then be overlaid on top of the first chart using the + operator to create a layered chart.\nLet\'s walk through an example of annotating a time-series chart with text and an emoji.\nStep 1: Create the base chart\nIn this example, we create a time-series chart to track the evolution of stock prices. The chart is interactive and contains a multi-line tooltip. Click here to learn more about multi-line tooltips in Altair.\nFirst, we import the required libraries and load the example stocks dataset using the vega_datasets package:\nimport altair as alt\nimport pandas as pd\nimport streamlit as st\nfrom vega_datasets import data\n\n# We use @st.cache_data to keep the dataset in cache\n@st.cache_data\ndef get_data():\n    source = data.stocks()\n    source = source[source.date.gt(""2004-01-01"")]\n    return source\n\nsource = get_data()\n\nNext, we define a function get_chart() to create the interactive time-series chart of the stock prices with a multi-line tooltip. The x-axis represents the date, and the y-axis represents the stock price.\nWe then invoke get_chart() that takes the stock prices dataframe as an input and returns a chart object. This is going to be our base chart on which we will overlay the annotations in Step 2.\n# Define the base time-series chart.\ndef get_chart(data):\n    hover = alt.selection_single(\n        fields=[""date""],\n        nearest=True,\n        on=""mouseover"",\n        empty=""none"",\n    )\n\n    lines = (\n        alt.Chart(data, title=""Evolution of stock prices"")\n        .mark_line()\n        .encode(\n      ']",Maximum Daily Temperature (C),conditional,"[{'source': 'https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart', 'title': 'st.altair_chart - Streamlit Docs'}]",True,"I'm sorry, but the provided context does not contain specific information about the weather data shown in the Seattle Weather chart for 2012-2015 with temperatures from -5°C to 40°C.",0.0,0.0
How to update a line chart in real time using Streamlit?,"['Start and stop a streaming fragment - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceaddTutorialsremoveExecution flowremoveFRAGMENTSRerun your app from a fragmentCreate a multiple-container fragmentStart and stop a streaming fragmentConnect to data sourcesaddMultipage appsaddWork with LLMsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/Tutorials/Execution flow/Start and stop a streaming fragmentStart and stop a streaming fragment\nStreamlit lets you turn functions into fragments, which can rerun independently from the full script. Additionally, you can tell Streamlit to rerun a fragment at a set time interval. This is great for streaming data or monitoring processes. You may want the user to start and stop this live streaming. To do this, programmatically set the run_every parameter for your fragment.\nApplied concepts\n\nUse a fragment to stream live data.\nStart and stop a fragment from automatically rerunning.\n\nPrerequisites\nstreamlit>=1.33.0\n\nThis tutorial uses fragments, which require Streamlit version 1.33.0 or later.\nThis tutorial assumes you have a clean working directory called your-repository.\nYou should have a basic understanding of fragments.\n\nSummary\nIn this example, you\'ll build an app that streams two data series in a line chart. Your app will gather recent data on the first load of a session and statically display the line chart. Two buttons in the sidebar will allow users to start and stop data streaming to update the chart in real time. You\'ll use a fragment to manage the frequency and scope of the live updates.\nHere\'s a look at what you\'ll build:\nComplete codeexpand_moreimport streamlit as st\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\n\n\ndef get_recent_data(last_timestamp):\n    """"""Generate and return data from last timestamp to now, at most 60 seconds.""""""\n    now = datetime.now()\n    if now - last_timestamp > timedelta(seconds=60):\n        last_timestamp = now - timedelta(seconds=60)\n    sample_time = timedelta(seconds=0.5)  # time between data points\n    next_timestamp = last_timestamp + sample_time\n    timestamps = np.arange(next_timestamp, now, sample_time)\n    sample_values = np.random.randn(len(timestamps), 2)\n\n    data = pd.DataFrame(sample_values, index=timestamps, columns=[""A"", ""B""])\n    return data\n\n\nif ""data"" not in st.session_state:\n    st.session_state.data = get_recent_data(datetime.now() - timedelta(seconds=60))\n\nif ""stream"" not in st.session_state:\n    st.session_state.stream = False\n\n\ndef toggle_streaming():\n    st.session_state.stream = not st.session_state.stream\n\n\nst.title(""Data feed"")\nst.sidebar.slider(\n    ""Check for updates every: (seconds)"", 0.5, 5.0, value=1.0, key=""run_every""\n)\nst.sidebar.button(\n    ""Start streaming"", disabled=st.session_state.stream, on_click=toggle_streaming\n)\nst.sidebar.button(\n    ""Stop streaming"", disabled=not st.session_state.stream, on_click=toggle_streaming\n)\n\nif st.session_state.stream is True:\n    run_every = st.session_state.run_every\nelse:\n    run_every = None\n\n\n@st.experimental_fragment(run_every=run_every)\ndef show_latest_data():\n    last_timestamp = st.session_state.data.index[-1]\n    st.session_state.data = pd.concat(\n        [st.session_state.data, get_recent_data(last_timestamp)]\n    )\n   ']","To update a line chart in real time using Streamlit, you can build an app that streams two data series in a line chart. The app will gather recent data on the first load of a session and statically display the line chart. Two buttons in the sidebar will allow users to start and stop data streaming to update the chart in real time. You can use a fragment to manage the frequency and scope of the live updates.",reasoning,"[{'source': 'https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns', 'title': 'Start and stop a streaming fragment - Streamlit Docs'}]",True,"To update a line chart in real time using Streamlit, you can use the st.line_chart() function. You can pass the data you want to display in real-time to this function, and Streamlit will automatically update the chart as the data changes. Additionally, you can specify the x and y axes columns, as well as customize the color of the lines if needed.",0.0,0.9981207697171764
Which guides show how Streamlit apps connect to databases and APIs using Secrets management and caching?,"[""Connect to data sources - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceaddTutorialsremoveExecution flowaddConnect to data sourcesremoveAWS S3BigQueryDeta BaseFirestoreopen_in_newGoogle Cloud StorageMicrosoft SQL ServerMongoDBMySQLNeonPostgreSQLPrivate Google SheetPublic Google SheetSnowflakeSupabaseTableauTiDBTigerGraphMultipage appsaddWork with LLMsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/Tutorials/Connect to data sourcesConnect Streamlit to data sources\nThese step-by-step guides demonstrate how to connect Streamlit apps to various databases & APIs.\nThey use Streamlit's Secrets management and\ncaching to provide secure and fast data access.\nAWS S3BigQueryDeta BaseFirestore (blog)Google Cloud StorageMicrosoft SQL ServerMongoDBMySQLNeonPostgreSQLPrivate Google SheetPublic Google SheetSnowflakeSupabaseTableauTiDBTigerGraphPrevious: Execution flowNext: AWS S3forumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy""]",These step-by-step guides demonstrate how to connect Streamlit apps to various databases & APIs. They use Streamlit's Secrets management and caching to provide secure and fast data access.,reasoning,"[{'source': 'https://docs.streamlit.io/develop/tutorials/databases', 'title': 'Connect to data sources - Streamlit Docs'}]",True,"The guides on connecting Streamlit apps to databases and APIs using Secrets management and caching cover various databases and APIs, outlining secure and fast data access methods within Streamlit.
They provide step-by-step instructions for integrating with databases like AWS S3, BigQuery, MongoDB, and APIs such as Google Cloud Storage.
By utilizing Streamlit's Secrets management and caching features, these guides ensure secure data connections and optimized performance for Streamlit applications.",0.5714285714285714,0.9266540334772603
How to use Numpy for random time series data in Python for Streamlit?,"[' st.session_state.data = st.session_state.data[-100:]\n    st.line_chart(st.session_state.data)\n\n\nshow_latest_data()\n\nBuilt with Streamlit 🎈Fullscreen open_in_new\nBuild the example\nInitialize your app\n\n\nIn your_repository, create a file named app.py.\n\n\nIn a terminal, change directories to your_repository and start your app.\nstreamlit run app.py\n\nYour app will be blank since you still need to add code.\n\n\nIn app.py, write the following:\n import streamlit as st\n import pandas as pd\n import numpy as np\n from datetime import datetime, timedelta\n\nYou\'ll be using these libraries as follows:\n\nYou\'ll work with two data series in a pandas.DataFrame.\nYou\'ll generate random data with numpy.\nThe data will have datetime.datetime index values.\n\n\n\nSave your app.py file and view your running app.\n\n\nClick ""Always rerun"" or hit your ""A"" key in your running app.\nYour running preview will automatically update as you save changes to app.py. Your preview will still be blank. Return to your code.\n\n\nBuild a function to generate random, recent data\nTo begin with, you\'ll define a function to randomly generate some data for two time series, which you\'ll call ""A"" and ""B."" It\'s okay to skip this section if you just want to copy the function.\nComplete function to randomly generate sales dataexpand_moredef get_recent_data(last_timestamp):\n    """"""Generate and return data from last timestamp to now, at most 60 seconds.""""""\n    now = datetime.now()\n    if now - last_timestamp > timedelta(seconds=60):\n        last_timestamp = now - timedelta(seconds=60)\n    sample_time = timedelta(seconds=0.5)  # time between data points\n    next_timestamp = last_timestamp + sample_time\n    timestamps = np.arange(next_timestamp, now, sample_time)\n    sample_values = np.random.randn(len(timestamps), 2)\n\n    data = pd.DataFrame(sample_values, index=timestamps, columns=[""A"", ""B""])\n    return data\n\n\n\nStart your function definition.\ndef get_recent_data(last_timestamp):\n    """"""Generate and return data from last timestamp to now, at most 60 seconds.""""""\n\nYou\'ll pass the timestamp of your most recent datapoint to your data-generating function. Your function will use this to only return new data.\n\n\nGet the current time and adjust the last timestamp if it is over 60 seconds ago.\n    now = datetime.now()\n    if now - last_timestamp > timedelta(seconds=60):\n        last_timestamp = now - timedelta(seconds=60)\n\nBy updating the last timestamp, you\'ll ensure the function never returns more than 60 seconds of data.\n\n\nDeclare a new variable, sample_time, to define the time between datapoints. Calculate the timestamp of the first, new datapoint.\n    sample_time = timedelta(seconds=0.5)  # time between data points\n    next_timestamp = last_timestamp + sample_time\n\n\n\nCreate a datetime.datetime index and generate two data series of the same length.\n    timestamps = np.arange(next_timestamp, now, sample_time)\n    sample_values = np.random.randn(len(timestamps), 2)\n\n\n\nCombine the data series with the index into a pandas.DataFrame and return the data.\n    data = pd.DataFrame(sample_values, index=timestamps, columns=[""A"", ""B""])\n    return data\n\n\n\n(Optional) Test out your function by calling it and displaying the data.\ndata = get_recent_data(datetime.now() - timedelta(seconds=60))\ndata\n\nSave your app.py file to see the preview. Delete these two lines when finished.\n\n\nInitialize Session State values for your app\nSince you will dynamically change the run_every parameter of @st.experimental']",You'll generate random data with numpy by using the np.random.randn() function to create random values for time series data in Python for Streamlit.,reasoning,"[{'source': 'https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns', 'title': 'Start and stop a streaming fragment - Streamlit Docs'}]",True,You can use NumPy to generate random time series data by creating a pandas DataFrame and populating it with NumPy's random functions. Make sure to set the index of the DataFrame to datetime values using the datetime module. You can then visualize this data in a Streamlit app using the vega_lite_chart method provided by Streamlit.,0.5,0.8964349769670846
How to efficiently manage multiple elements on grid cards in a Streamlit app using fragments and st.empty()?,"['_a:\n        black_cats()\n    with container_b:\n        black_cats()\n    with container_c:\n        black_cats()\n\nIn this new version, card_a, card_b, and card_c will be st.empty() containers. You create container_a, container_b, and container_c to allow Streamlit to draw multiple elements on each grid card.\n\n\nSimilarly define your orange-cat fragment function.\n@st.experimental_fragment\ndef herd_orange_cats(card_a, card_b, card_c):\n    st.button(""Herd the orange cats"")\n    container_a = card_a.container()\n    container_b = card_b.container()\n    container_c = card_c.container()\n    with container_a:\n        orange_cats()\n    with container_b:\n        orange_cats()\n    with container_c:\n        orange_cats()\n\n\n\nPut the functions together together to create an app\n\n\nCall both of your fragments in the sidebar.\nwith st.sidebar:\n    herd_black_cats(grid[0].empty(), grid[2].empty(), grid[4].empty())\n    herd_orange_cats(grid[1].empty(), grid[3].empty(), grid[5].empty())\n\nBy creating st.empty() containers in each card and passing them to your fragments, you prevent elements from accumulating in the cards with each fragment rerun. If you create the st.empty() containers earlier in your app, full-script reruns will clear the orange-cat cards while (first) rendering the black-cat cards.\n\n\nInclude a button outside of your fragments. When clicked, the button will trigger a full-script rerun since you\'re calling its widget function outside of any fragment.\n    st.button(""Herd all the cats"")\n\n\n\nSave your file and try out the app! When you click ""Herd the black cats"" or ""Herd the orange cats,"" Streamlit will only redraw the three related cards. When you click ""Herd all the cats,"" Streamlit redraws all six cards.\n\nPrevious: Rerun your app from a fragmentNext: Start and stop a streaming fragmentforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']","By creating st.empty() containers in each card and passing them to your fragments, you prevent elements from accumulating in the cards with each fragment rerun. If you create the st.empty() containers earlier in your app, full-script reruns will clear the orange-cat cards while (first) rendering the black-cat cards.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/tutorials/execution-flow/create-a-multiple-container-fragment', 'title': 'Create a fragment across multiple containers - Streamlit Docs'}]",True,"To efficiently manage multiple elements on grid cards in a Streamlit app using fragments and st.empty(), define containers for each card to pass to st.empty() and populate them with the desired elements. Use st.empty() containers like card_a, card_b, and card_c along with container_a, container_b, and container_c to organize and display multiple elements on each grid card effectively. Lastly, call the fragment functions in the sidebar and populate each card with the corresponding elements using the defined containers.",0.6666666666666666,0.9390032636334537
"How does Session State manage user authentication and page access in Streamlit apps, and what is the role of `st.page_link` in creating a custom navigation menu?","[' # Render the dynamic menu!\n\nAdd other pages to your app\nAdd the following pages/user.py file:\nimport streamlit as st\nfrom menu import menu_with_redirect\n\n# Redirect to app.py if not logged in, otherwise show the navigation menu\nmenu_with_redirect()\n\nst.title(""This page is available to all users"")\nst.markdown(f""You are currently logged with the role of {st.session_state.role}."")\n\nSession State resets if a user manually navigates to a page by URL. Therefore, if a user tries to access an admin page in this example, Session State will be cleared, and they will be redirected to the main page as an unauthenicated user. However, it\'s still good practice to include a check of the role at the top of each restricted page. You can use st.stop to halt an app if a role is not whitelisted.\npages/admin.py:\nimport streamlit as st\nfrom menu import menu_with_redirect\n\n# Redirect to app.py if not logged in, otherwise show the navigation menu\nmenu_with_redirect()\n\n# Verify the user\'s role\nif st.session_state.role not in [""admin"", ""super-admin""]:\n    st.warning(""You do not have permission to view this page."")\n    st.stop()\n\nst.title(""This page is available to all admins"")\nst.markdown(f""You are currently logged with the role of {st.session_state.role}."")\n\npages/super-admin.py:\nimport streamlit as st\nfrom menu import menu_with_redirect\n\n# Redirect to app.py if not logged in, otherwise show the navigation menu\nmenu_with_redirect()\n\n# Verify the user\'s role\nif st.session_state.role not in [""super-admin""]:\n    st.warning(""You do not have permission to view this page."")\n    st.stop()\n\nst.title(""This page is available to super-admins"")\nst.markdown(f""You are currently logged with the role of {st.session_state.role}."")\n\nAs noted above, the redirect in menu_with_redirect() will prevent a user from ever seeing the warning messages on the admin pages. If you want to see the warning, just add another st.page_link(""pages/admin.py"") button at the bottom of app.py so you can navigate to the admin page after selecting the ""user"" role. 😉Previous: Multipage appsNext: Work with LLMsforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy'
 'Build a custom navigation menu with `st.page_link` - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceaddTutorialsremoveExecution flowaddConnect to data sourcesaddMultipage appsremoveBuild navigation with st.page_linkWork with LLMsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/Tutorials/Multipage apps/Build navigation with st.page_linkBuild a custom navigation menu with st.page_link\nStreamlit lets you build custom navigation menus and elements with st.page_link. Introduced in Streamlit version 1.31.0, st.page_link can link to other pages in your multipage app or to external sites. When linked to another page in your app, st.page_link will show a highlight effect to indicate the current page. When combined with the client.showSidebarNavigation configuration option, you can build sleek, dynamic navigation in your app.\nPrerequisites\nCreate a new working directory in your development environment. We\'ll call this directory your-repository.\nSummary\nIn this example, we\'ll build a dynamic navigation menu for a multipage app that depends on the current user\'s role. We\'ve abstracted away the use of username and creditials to simplify the example. Instead, we\'ll use a selectbox on the main page of the app to switch between roles. Session State will carry this selection between pages. The app will have a main page (app.py) which serves as the abstracted log-in page. There will be three additional pages which will be hidden or accessible, depending on the current role. The file structure will be as follows:\nyour-repository/\n├── .streamlit/\n│   └── config.toml\n├── pages/\n│   ├── admin.py\n│   ├── super-admin.py\n│   └── user.py\n├── menu.py\n└── app.py\n\nHere\'s a look at what we\'ll build:\nBuilt with Streamlit 🎈Fullscreen open_in_new\nBuild the example\nHide the default sidebar navigation\nWhen creating a custom navigation menu, you need to hide the default sidebar navigation using client.showSidebarNavigation. Add the following .streamlit/config.toml file to your working directory:\n[client]\nshowSidebarNavigation = false\n\nCreate a menu function\nYou can write different menu logic for different pages or you can create a single menu function to call on multiple pages. In this example, we\'ll use the same menu logic on all pages, including a redirect to the main page when a user isn\'t logged in. We\'ll build a few helper functions to do this.\n\nmenu_with_redirect() checks if a user is logged in, then either redirects them to the main page or renders the menu.\nmenu() will call the correct helper function to render the menu based on whether the user is logged in or not.\nauthenticated_menu() will display a menu based on an authenticated user\'s role.\nunauthenticated_menu() will display a menu for unauthenticated users.\n\nWe\'ll call menu() on the main page and call menu_with_redirect() on the other pages. st.session_state.role will store the current selected role. If this value does not exist or is set to None, then the user is not logged in. Otherwise, it will hold the user\'s role as a string: ""user"", ""admin"", or ""super-admin"".\nAdd the following menu.py file to your working directory. (We\'ll describe the functions in more detail below.)\nimport streamlit as st\n\n\ndef authenticated_menu():\n    # Show a navigation menu for authenticated users\n    st.sidebar.page_link(""app.py"", label=""Switch accounts"")\n    st.sidebar.page_link(""pages/user.py"", label=""Your profile"")\n    if st.session_state.role in [""admin"", ""super-admin""]:\n        st.sidebar.page_link(""pages/admin.py"", label=""Manage users"")\n        st.sidebar.page_link(\n            ""pages/super-admin.py"",\n            label=""Manage admin access"",\n         ']","Session State in Streamlit manages user authentication by storing the current selected role in st.session_state.role. If this value is None or does not exist, the user is not logged in. Otherwise, it holds the user's role as a string. The role determines which pages the user can access based on the logic implemented in the pages. st.page_link is used to create a custom navigation menu in Streamlit apps, allowing users to navigate between different pages within the app.",multi_context,"[{'source': 'https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav', 'title': 'Build a custom navigation menu with `st.page_link` - Streamlit Docs'}
 {'source': 'https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav', 'title': 'Build a custom navigation menu with `st.page_link` - Streamlit Docs'}]",True,"Session State in Streamlit manages user authentication and page access by allowing you to share variables between reruns for each user session. This enables you to persist state and manipulate it using Callbacks, ensuring that data remains consistent across different pages within a multipage app. When creating custom navigation menus in Streamlit apps, the st.page_link function plays a key role in linking to other pages or external sites, providing a way to navigate between different sections of your app with highlighted current page indicators.",0.2857142857142857,0.8612635168026577
How to rerun a full script from a Streamlit fragment showing daily sales data?,"['Trigger a full-script rerun from inside a fragment - Streamlit DocsDocumentationsearchSearchrocket_launchGet startedInstallationaddFundamentalsaddFirst stepsaddcodeDevelopConceptsaddAPI referenceaddTutorialsremoveExecution flowremoveFRAGMENTSRerun your app from a fragmentCreate a multiple-container fragmentStart and stop a streaming fragmentConnect to data sourcesaddMultipage appsaddWork with LLMsaddQuick referenceaddweb_assetDeployConceptsaddStreamlit Community CloudaddStreamlit in Snowflakeopen_in_newOther platformsaddschoolKnowledge baseFAQInstalling dependenciesDeployment issuesHome/Develop/Tutorials/Execution flow/Rerun your app from a fragmentTrigger a full-script rerun from inside a fragment\nStreamlit lets you turn functions into fragments, which can rerun independently from the full script. When a user interacts with a widget inside a fragment, only the fragment reruns. Sometimes, you may want to trigger a full-script rerun from inside a fragment. To do this, call st.rerun inside the fragment.\nApplied concepts\n\nUse a fragment to rerun part or all of your app, depending on user input.\n\nPrerequisites\nstreamlit>=1.33.0\n\nThis tutorial uses fragments, which require Streamlit version 1.33.0 or later.\nThis tutorial assumes you have a clean working directory called your-repository.\nYou should have a basic understanding of fragments and st.rerun.\n\nSummary\nIn this example, you\'ll build an app to display sales data. The app has two sets of elements that depend on a date selection. One set of elements displays information for the selected day. The other set of elements displays information for the associated month. If the user changes days within a month, Streamlit only needs to update the first set of elements. If the user selects a day in a different month, Streamlit needs to update all the elements.\nYou\'ll collect the day-specific elements into a fragment to avoid rerunning the full app when a user changes days within the same month. If you want to jump ahead to the fragment function definition, see Build a function to show daily sales data.\n\nHere\'s a look at what you\'ll build:\nComplete codeexpand_moreimport streamlit as st\nimport pandas as pd\nimport numpy as np\nfrom datetime import date, timedelta\nimport string\nimport time\n\n\n@st.cache_data\ndef get_data():\n    """"""Generate random sales data for Widget A through Widget Z""""""\n\n    product_names = [""Widget "" + letter for letter in string.ascii_uppercase]\n    average_daily_sales = np.random.normal(1_000, 300, len(product_names))\n    products = dict(zip(product_names, average_daily_sales))\n\n    data = pd.DataFrame({})\n    sales_dates = np.arange(date(2023, 1, 1), date(2024, 1, 1), timedelta(days=1))\n    for product, sales in products.items():\n        data[product] = np.random.normal(sales, 300, len(sales_dates)).round(2)\n    data.index = sales_dates\n    data.index = data.index.date\n    return data\n\n\n@st.experimental_fragment\ndef show_daily_sales(data):\n    time.sleep(1)\n    with st.container(height=100):\n        selected_date = st.date_input(\n            ""Pick a day "",\n            value=date(2023, 1, 1),\n            min_value=date(2023, 1, 1),\n            max_value=date(2023, 12, 31),\n            key=""selected_date"",\n        )\n\n    if ""previous_date"" not in st.session_state:\n        st.session_state.previous_date = selected_date\n    previous_date = st.session_state.previous_date\n    st.session_state.previous_date = selected_date\n    is_new_month = selected']","To rerun a full script from a Streamlit fragment showing daily sales data, you can call st.rerun inside the fragment. This will trigger a full-script rerun when needed.",conditional,"[{'source': 'https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment', 'title': 'Trigger a full-script rerun from inside a fragment - Streamlit Docs'}]",True,"To rerun a full script from a Streamlit fragment showing daily sales data, you can use the st.rerun function inside the fragment. This will trigger a rerun of the entire script, updating the daily sales data displayed. Additionally, you can set the run_every parameter for the fragment to automatically rerun at specified intervals for live streaming or monitoring purposes.",0.5714285714285714,0.9975382005961775
How to adjust app update frequency with user interaction on streaming?,"['Test out your app by clicking ""Start streaming."" Try adjusting the frequency of updates.\n\n\nNext steps\nTry adjusting the frequency of data generation or how much data is kept in Session State. Within get_recent_data try setting sample_time with a widget.\nTry using st.plotly_chart or st.altair_chart to add labels to your chart.Previous: Create a multiple-container fragmentNext: Connect to data sourcesforumStill have questions?Our forums are full of helpful information and Streamlit experts.HomeContact UsCommunity© 2024 Snowflake Inc.Cookie policy']",Try adjusting the frequency of updates by setting sample_time with a widget.,conditional,"[{'source': 'https://docs.streamlit.io/develop/tutorials/execution-flow/start-and-stop-fragment-auto-reruns', 'title': 'Start and stop a streaming fragment - Streamlit Docs'}]",True,"To adjust the app update frequency with user interaction on streaming, you can try setting the sample time using a widget within the function that retrieves the data. Additionally, you can use Streamlit's plotting functions like st.plotly_chart or st.altair_chart to enhance the visualization with labels on the chart. Experiment with different data generation frequencies and session state settings to optimize the user experience based on their interaction with the app.",0.4,0.9961575274278007
